From 4864cf15edc30d6d85c38ddfeaef0e2546db44ff Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:16:25 -0700
Subject: [PATCH 01/39] Use DecodeBody

---
 go/libkb/kbpackets.go      | 41 ++++++++++++++++++++++++++++++++++++++
 go/libkb/kbpackets_test.go | 21 ++++++++++---------
 2 files changed, 53 insertions(+), 9 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index b71693c7773..2ca057121e2 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -269,6 +269,33 @@ func (p *KeybasePacket) unmarshalBinary(data []byte) error {
 	return p.checkHash()
 }
 
+func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag, body interface{}) error {
+	ch := codecHandle()
+	p.Body = body
+	if err := MsgpackDecodeAll(data, ch, p); err != nil {
+		return err
+	}
+
+	if p.Tag != tag {
+		return fmt.Errorf("Expected tag %d, got %d", tag, p.Tag)
+	}
+
+	// Test for nonstandard msgpack data (which could be maliciously crafted)
+	// by re-encoding and making sure we get the same thing.
+	// https://github.com/keybase/client/issues/423
+	//
+	// Ideally this should be done at a lower level, like MsgpackDecodeAll, but
+	// our msgpack library doesn't sort maps the way we expect. See
+	// https://github.com/ugorji/go/issues/103
+	if reencoded, err := p.Encode(); err != nil {
+		return err
+	} else if !bytes.Equal(reencoded, data) {
+		return FishyMsgpackError{data, reencoded}
+	}
+
+	return p.checkHash()
+}
+
 func DecodeArmoredPacket(s string) (*KeybasePacket, error) {
 	b, err := base64.StdEncoding.DecodeString(s)
 	if err != nil {
@@ -286,6 +313,20 @@ func DecodePacket(data []byte) (ret *KeybasePacket, err error) {
 	return
 }
 
+func DecodePacketBody(data []byte, tag PacketTag, body interface{}) error {
+	var p KeybasePacket
+	p.Body = body
+	return p.unmarshalBinaryWithTagAndBody(data, tag, body)
+}
+
+func DecodeArmoredPacketBody(s string, tag PacketTag, body interface{}) error {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return err
+	}
+	return DecodePacketBody(b, tag, body)
+}
+
 type Packetable interface {
 	ToPacket() (*KeybasePacket, error)
 }
diff --git a/go/libkb/kbpackets_test.go b/go/libkb/kbpackets_test.go
index f6769d370fb..468c7a1ae07 100644
--- a/go/libkb/kbpackets_test.go
+++ b/go/libkb/kbpackets_test.go
@@ -10,7 +10,8 @@ import (
 )
 
 func TestBadMsgpack(t *testing.T) {
-	p, err := DecodeArmoredPacket(`
+	var info NaclEncryptionInfo
+	err := DecodeArmoredPacketBody(`
 g6Rib2R5hqhkZXRhY2hlw6loYXNoX3R5cGUKo2tlecQjASBz6XLVJ/u0KKVpvp9QlcNvIopFsusm
 wjFFHVUYo3ykIwqncGF5bG9hZMUD7XsiYm9keSI6eyJkZXZpY2UiOnsiaWQiOiIwNTc4NDNjMjAy
 NTE5MjZhY2MwZDVkYjMxMjY5NzkxOCIsImtpZCI6IjAxMjEzNzlkNTM3MGFlYjRlOWY3YWE0YjUy
@@ -32,13 +33,14 @@ InNlcW5vIjo1NjN9LCJwcmV2IjoiZWUwMDc4NTgyNDZhZGY4ODU1OTc2NmYxNjRkMGIxOTUzMDMy
 MDljYmQ4MmFmYTdmYzZkZWQxOGI0OWI3YjZiMiIsInNlcW5vIjo0LCJ0YWciOiJzaWduYXR1cmUi
 faNzaWfEQG3uIt5g6X6NRAjnHdF1NSRO5UYJD1B0Ku1ixBIeS2zuSAGR0pts2Lbl+Cz3BGvu9isq
 7MHrgCa2r1PEo4C/4ACoc2lnX3R5cGUgo3RhZ80CAqd2ZXJzaW9uAQ==
-`)
-	require.Error(t, err, "Malformed msgpack should fail to decode, but decoded to: %#v", p)
+`, TagEncryption, &info)
+	require.Error(t, err, "Malformed msgpack should fail to decode, but decoded to: %#v", info)
 }
 
 func TestFishyMsgpack(t *testing.T) {
+	var info NaclSigInfo
 	// This message has a duplicate key ("detached") in the top-level map
-	p, err := DecodeArmoredPacket(`
+	err := DecodeArmoredPacketBody(`
 hKRib2R5hqhkZXRhY2hlZMOoZGV0YWNoZWTCqWhhc2hfdHlwZQqja2V5xCMBIHPpctUn+7QopWm+
 n1CVw28iikWy6ybCMUUdVRijfKQjCqdwYXlsb2FkxQPteyJib2R5Ijp7ImRldmljZSI6eyJpZCI6
 IjA1Nzg0M2MyMDI1MTkyNmFjYzBkNWRiMzEyNjk3OTE4Iiwia2lkIjoiMDEyMTM3OWQ1MzcwYWVi
@@ -60,8 +62,8 @@ ZDVlOThiNWZlIiwic2Vxbm8iOjU2M30sInByZXYiOiJlZTAwNzg1ODI0NmFkZjg4NTU5NzY2ZjE2
 NGQwYjE5NTMwMzIwOWNiZDgyYWZhN2ZjNmRlZDE4YjQ5YjdiNmIyIiwic2Vxbm8iOjQsInRhZyI6
 InNpZ25hdHVyZSJ9o3NpZ8RAbe4i3mDpfo1ECOcd0XU1JE7lRgkPUHQq7WLEEh5LbO5IAZHSm2zY
 tuX4LPcEa+72KyrsweuAJravU8SjgL/gAKhzaWdfdHlwZSCjdGFnzQICp3ZlcnNpb24B
-`)
-	require.IsType(t, err, FishyMsgpackError{}, "p=%+v", p)
+`, TagSignature, &info)
+	require.IsType(t, err, FishyMsgpackError{}, "info=%+v, err+%+v", info, err)
 }
 
 // Guard against unexpected codec encoding changes, in particular for
@@ -83,12 +85,13 @@ func TestHardcodedPacketEncode(t *testing.T) {
 // This is a regression test for
 // https://github.com/ugorji/go/issues/237 .
 func TestMsgpackReencodeNilHash(t *testing.T) {
+	var info NaclEncryptionInfo
 	// This message has a nil hash.
-	p, err := DecodeArmoredPacket(`
+	err := DecodeArmoredPacketBody(`
 hKRib2R5hapjaXBoZXJ0ZXh0wKhlbmNfdHlwZQClbm9uY2XArHJlY2VpdmVyX2tlecCqc2VuZGVy
 X2tlecCkaGFzaIKkdHlwZQildmFsdWXEIJZSZH19AzYud7qy9x3yx1hN2MooqnhjsytUSqTK+VMZ
 o3RhZ80CA6d2ZXJzaW9uAQ==
-`)
+`, TagEncryption, &info)
 	// In particular, shouldn't return a FishyMsgpackError.
-	require.NoError(t, err, "p=%+v", p)
+	require.NoError(t, err, "info=%+v", info)
 }

From 97decbdb9846fbcc72d7a703750d6624418d8034 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:21:10 -0700
Subject: [PATCH 02/39] Fix tag

---
 go/libkb/constants.go | 14 ++++++++++++++
 go/libkb/errors.go    |  4 ++--
 go/libkb/naclwrap.go  |  8 ++++----
 go/libkb/skb.go       |  2 +-
 4 files changed, 21 insertions(+), 7 deletions(-)

diff --git a/go/libkb/constants.go b/go/libkb/constants.go
index cc91d55d07d..678314b402d 100644
--- a/go/libkb/constants.go
+++ b/go/libkb/constants.go
@@ -4,6 +4,7 @@
 package libkb
 
 import (
+	"fmt"
 	"os"
 	"runtime"
 	"time"
@@ -459,6 +460,19 @@ const (
 	TagEncryption PacketTag = 515
 )
 
+func (t PacketTag) String() string {
+	switch t {
+	case TagP3skb:
+		return "PacketTag(P3skb)"
+	case TagSignature:
+		return "PacketTag(Signature)"
+	case TagEncryption:
+		return "PacketTag(Encryption)"
+	default:
+		return fmt.Sprintf("PacketTag(%d)", uint(t))
+	}
+}
+
 const (
 	KIDPGPBase    AlgoType = 0x00
 	KIDPGPRsa     AlgoType = 0x1
diff --git a/go/libkb/errors.go b/go/libkb/errors.go
index fb203c2c472..59c79e818e3 100644
--- a/go/libkb/errors.go
+++ b/go/libkb/errors.go
@@ -734,11 +734,11 @@ func NewNoUsernameError() NoUsernameError { return NoUsernameError{} }
 //=============================================================================
 
 type UnmarshalError struct {
-	T string
+	Tag PacketTag
 }
 
 func (u UnmarshalError) Error() string {
-	return "Bad " + u.T + " packet"
+	return "Bad " + u.Tag.String() + " packet"
 }
 
 type VerificationError struct {
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index f4d92ff422c..32be804c6bf 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -449,7 +449,7 @@ func NaclVerifyAndExtract(s string) (key GenericKey, payload []byte, fullBody []
 
 	naclSig, ok := packet.Body.(*NaclSigInfo)
 	if !ok {
-		err = UnmarshalError{"NACL signature"}
+		err = UnmarshalError{TagSignature}
 		return nil, nil, nil, err
 	}
 
@@ -499,7 +499,7 @@ func (s *NaclSigInfo) ToPacket() (ret *KeybasePacket, err error) {
 func (p KeybasePacket) ToNaclSigInfo() (*NaclSigInfo, error) {
 	ret, ok := p.Body.(*NaclSigInfo)
 	if !ok {
-		return nil, UnmarshalError{"Signature"}
+		return nil, UnmarshalError{TagSignature}
 	}
 	return ret, nil
 }
@@ -669,7 +669,7 @@ func SigExtractKbPayloadAndKID(armored string) (payload []byte, kid keybase1.KID
 		return nil, kid, sigID, err
 	}
 	if sig, ok = packet.Body.(*NaclSigInfo); !ok {
-		err = UnmarshalError{"NaCl Signature"}
+		err = UnmarshalError{TagSignature}
 		return nil, kid, sigID, err
 	}
 	sigID = ComputeSigIDFromSigBody(byt)
@@ -874,7 +874,7 @@ func (k NaclDHKeyPair) DecryptFromString(ciphertext string) (msg []byte, sender
 	}
 
 	if nei, ok = kbp.Body.(*NaclEncryptionInfo); !ok {
-		err = UnmarshalError{"NaCl Encryption"}
+		err = UnmarshalError{TagEncryption}
 		return
 	}
 	return k.Decrypt(nei)
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index 452f80827bb..ebe16bbb675 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -377,7 +377,7 @@ func (s *SKB) SetUID(uid keybase1.UID) {
 func (p KeybasePacket) ToSKB() (*SKB, error) {
 	ret, ok := p.Body.(*SKB)
 	if !ok {
-		return nil, UnmarshalError{"SKB"}
+		return nil, UnmarshalError{TagP3skb}
 	}
 	return ret, nil
 }

From b068adbc7a9c5c7fc214cbd560d55cc00c82c7f5 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:21:47 -0700
Subject: [PATCH 03/39] return unmarshal error

---
 go/libkb/kbpackets.go | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 2ca057121e2..1c0e7fc83b6 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -277,7 +277,8 @@ func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag
 	}
 
 	if p.Tag != tag {
-		return fmt.Errorf("Expected tag %d, got %d", tag, p.Tag)
+		return UnmarshalError{tag}
+		//return fmt.Errorf("Expected tag %d, got %d", tag, p.Tag)
 	}
 
 	// Test for nonstandard msgpack data (which could be maliciously crafted)

From 4412c63d69660c751e99d6b74ec61f8f6e59b80b Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:26:46 -0700
Subject: [PATCH 04/39] Use Decode

---
 go/engine/kex2_provisionee.go |  6 +-----
 go/libkb/kbpackets.go         |  9 +++++++++
 go/libkb/naclwrap.go          | 18 +++---------------
 go/libkb/skb_test.go          |  7 ++-----
 4 files changed, 15 insertions(+), 25 deletions(-)

diff --git a/go/engine/kex2_provisionee.go b/go/engine/kex2_provisionee.go
index c70f1c981eb..863682958fe 100644
--- a/go/engine/kex2_provisionee.go
+++ b/go/engine/kex2_provisionee.go
@@ -362,14 +362,10 @@ func (e *Kex2Provisionee) decodeSig(sig []byte) (*decodedSig, error) {
 	if err != nil {
 		return nil, err
 	}
-	packet, err := libkb.DecodePacket(body)
+	naclSig, err := libkb.DecodeNaclSigInfoPacket(body)
 	if err != nil {
 		return nil, err
 	}
-	naclSig, ok := packet.Body.(*libkb.NaclSigInfo)
-	if !ok {
-		return nil, libkb.UnmarshalError{T: "Nacl signature"}
-	}
 	jw, err := jsonw.Unmarshal(naclSig.Payload)
 	if err != nil {
 		return nil, err
diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 1c0e7fc83b6..9ae772c0710 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -328,6 +328,15 @@ func DecodeArmoredPacketBody(s string, tag PacketTag, body interface{}) error {
 	return DecodePacketBody(b, tag, body)
 }
 
+func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
+	var info NaclSigInfo
+	err := DecodePacketBody(data, TagSignature, &info)
+	if err != nil {
+		return NaclSigInfo{}, err
+	}
+	return info, nil
+}
+
 type Packetable interface {
 	ToPacket() (*KeybasePacket, error)
 }
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index 32be804c6bf..b8f94ba2932 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -442,17 +442,11 @@ func NaclVerifyAndExtract(s string) (key GenericKey, payload []byte, fullBody []
 		return nil, nil, nil, err
 	}
 
-	packet, err := DecodePacket(fullBody)
+	naclSig, err := DecodeNaclSigInfoPacket(fullBody)
 	if err != nil {
 		return nil, nil, nil, err
 	}
 
-	naclSig, ok := packet.Body.(*NaclSigInfo)
-	if !ok {
-		err = UnmarshalError{TagSignature}
-		return nil, nil, nil, err
-	}
-
 	var nk *NaclSigningKeyPublic
 	nk, err = naclSig.Verify()
 	if err != nil {
@@ -657,19 +651,13 @@ func KbOpenSig(armored string) ([]byte, error) {
 
 func SigExtractKbPayloadAndKID(armored string) (payload []byte, kid keybase1.KID, sigID keybase1.SigID, err error) {
 	var byt []byte
-	var packet *KeybasePacket
-	var sig *NaclSigInfo
-	var ok bool
+	var sig NaclSigInfo
 
 	if byt, err = KbOpenSig(armored); err != nil {
 		return nil, kid, sigID, err
 	}
 
-	if packet, err = DecodePacket(byt); err != nil {
-		return nil, kid, sigID, err
-	}
-	if sig, ok = packet.Body.(*NaclSigInfo); !ok {
-		err = UnmarshalError{TagSignature}
+	if sig, err = DecodeNaclSigInfoPacket(byt); err != nil {
 		return nil, kid, sigID, err
 	}
 	sigID = ComputeSigIDFromSigBody(byt)
diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index 20152cffce7..83d89bcc4df 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -42,11 +42,8 @@ func TestDecode0(t *testing.T) {
 
 func TestDecode1(t *testing.T) {
 	key := ""
-	bytes, err := base64.StdEncoding.DecodeString(key)
-	if err != nil {
-		t.Errorf("error decoding: %s", err)
-	}
-	_, err = DecodePacket(bytes)
+	var skb SKB
+	err := DecodeArmoredPacketBody(key, TagP3skb, &skb)
 	if err != nil {
 		t.Errorf("Failed to decode packet: %s", err)
 	}

From af75b7cb45af91dad34c12f4db9da8b6d6011e66 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:29:00 -0700
Subject: [PATCH 05/39] More

---
 go/libkb/kbpackets.go      | 8 ++++++++
 go/libkb/kbpackets_test.go | 5 ++---
 2 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 9ae772c0710..612be4b99e3 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -337,6 +337,14 @@ func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
 	return info, nil
 }
 
+func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return NaclSigInfo{}, err
+	}
+	return DecodeNaclSigInfoPacket(b)
+}
+
 type Packetable interface {
 	ToPacket() (*KeybasePacket, error)
 }
diff --git a/go/libkb/kbpackets_test.go b/go/libkb/kbpackets_test.go
index 468c7a1ae07..9d45d36bdc4 100644
--- a/go/libkb/kbpackets_test.go
+++ b/go/libkb/kbpackets_test.go
@@ -38,9 +38,8 @@ faNzaWfEQG3uIt5g6X6NRAjnHdF1NSRO5UYJD1B0Ku1ixBIeS2zuSAGR0pts2Lbl+Cz3BGvu9isq
 }
 
 func TestFishyMsgpack(t *testing.T) {
-	var info NaclSigInfo
 	// This message has a duplicate key ("detached") in the top-level map
-	err := DecodeArmoredPacketBody(`
+	info, err := DecodeArmoredNaclSigInfoPacket(`
 hKRib2R5hqhkZXRhY2hlZMOoZGV0YWNoZWTCqWhhc2hfdHlwZQqja2V5xCMBIHPpctUn+7QopWm+
 n1CVw28iikWy6ybCMUUdVRijfKQjCqdwYXlsb2FkxQPteyJib2R5Ijp7ImRldmljZSI6eyJpZCI6
 IjA1Nzg0M2MyMDI1MTkyNmFjYzBkNWRiMzEyNjk3OTE4Iiwia2lkIjoiMDEyMTM3OWQ1MzcwYWVi
@@ -62,7 +61,7 @@ ZDVlOThiNWZlIiwic2Vxbm8iOjU2M30sInByZXYiOiJlZTAwNzg1ODI0NmFkZjg4NTU5NzY2ZjE2
 NGQwYjE5NTMwMzIwOWNiZDgyYWZhN2ZjNmRlZDE4YjQ5YjdiNmIyIiwic2Vxbm8iOjQsInRhZyI6
 InNpZ25hdHVyZSJ9o3NpZ8RAbe4i3mDpfo1ECOcd0XU1JE7lRgkPUHQq7WLEEh5LbO5IAZHSm2zY
 tuX4LPcEa+72KyrsweuAJravU8SjgL/gAKhzaWdfdHlwZSCjdGFnzQICp3ZlcnNpb24B
-`, TagSignature, &info)
+`)
 	require.IsType(t, err, FishyMsgpackError{}, "info=%+v, err+%+v", info, err)
 }
 

From 0c9c5c3055a10fb0140bc21750b7fd448cabdab6 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:31:04 -0700
Subject: [PATCH 06/39] Add more helpers

---
 go/libkb/kbpackets.go      | 17 +++++++++++++++++
 go/libkb/kbpackets_test.go | 10 ++++------
 2 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 612be4b99e3..4a34ea8d824 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -345,6 +345,23 @@ func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
 	return DecodeNaclSigInfoPacket(b)
 }
 
+func DecodeNaclEncryptionInfoPacket(data []byte) (NaclEncryptionInfo, error) {
+	var info NaclEncryptionInfo
+	err := DecodePacketBody(data, TagEncryption, &info)
+	if err != nil {
+		return NaclEncryptionInfo{}, err
+	}
+	return info, nil
+}
+
+func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error) {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return NaclEncryptionInfo{}, err
+	}
+	return DecodeNaclEncryptionInfoPacket(b)
+}
+
 type Packetable interface {
 	ToPacket() (*KeybasePacket, error)
 }
diff --git a/go/libkb/kbpackets_test.go b/go/libkb/kbpackets_test.go
index 9d45d36bdc4..abda510d331 100644
--- a/go/libkb/kbpackets_test.go
+++ b/go/libkb/kbpackets_test.go
@@ -10,8 +10,7 @@ import (
 )
 
 func TestBadMsgpack(t *testing.T) {
-	var info NaclEncryptionInfo
-	err := DecodeArmoredPacketBody(`
+	info, err := DecodeArmoredNaclEncryptionInfoPacket(`
 g6Rib2R5hqhkZXRhY2hlw6loYXNoX3R5cGUKo2tlecQjASBz6XLVJ/u0KKVpvp9QlcNvIopFsusm
 wjFFHVUYo3ykIwqncGF5bG9hZMUD7XsiYm9keSI6eyJkZXZpY2UiOnsiaWQiOiIwNTc4NDNjMjAy
 NTE5MjZhY2MwZDVkYjMxMjY5NzkxOCIsImtpZCI6IjAxMjEzNzlkNTM3MGFlYjRlOWY3YWE0YjUy
@@ -33,7 +32,7 @@ InNlcW5vIjo1NjN9LCJwcmV2IjoiZWUwMDc4NTgyNDZhZGY4ODU1OTc2NmYxNjRkMGIxOTUzMDMy
 MDljYmQ4MmFmYTdmYzZkZWQxOGI0OWI3YjZiMiIsInNlcW5vIjo0LCJ0YWciOiJzaWduYXR1cmUi
 faNzaWfEQG3uIt5g6X6NRAjnHdF1NSRO5UYJD1B0Ku1ixBIeS2zuSAGR0pts2Lbl+Cz3BGvu9isq
 7MHrgCa2r1PEo4C/4ACoc2lnX3R5cGUgo3RhZ80CAqd2ZXJzaW9uAQ==
-`, TagEncryption, &info)
+`)
 	require.Error(t, err, "Malformed msgpack should fail to decode, but decoded to: %#v", info)
 }
 
@@ -84,13 +83,12 @@ func TestHardcodedPacketEncode(t *testing.T) {
 // This is a regression test for
 // https://github.com/ugorji/go/issues/237 .
 func TestMsgpackReencodeNilHash(t *testing.T) {
-	var info NaclEncryptionInfo
 	// This message has a nil hash.
-	err := DecodeArmoredPacketBody(`
+	info, err := DecodeArmoredNaclEncryptionInfoPacket(`
 hKRib2R5hapjaXBoZXJ0ZXh0wKhlbmNfdHlwZQClbm9uY2XArHJlY2VpdmVyX2tlecCqc2VuZGVy
 X2tlecCkaGFzaIKkdHlwZQildmFsdWXEIJZSZH19AzYud7qy9x3yx1hN2MooqnhjsytUSqTK+VMZ
 o3RhZ80CA6d2ZXJzaW9uAQ==
-`, TagEncryption, &info)
+`)
 	// In particular, shouldn't return a FishyMsgpackError.
 	require.NoError(t, err, "info=%+v", info)
 }

From 4637474a742ecf927e486d11a23ecfde2c243074 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:32:04 -0700
Subject: [PATCH 07/39] Remove one more

---
 go/libkb/naclwrap.go | 12 +++---------
 1 file changed, 3 insertions(+), 9 deletions(-)

diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index b8f94ba2932..91fee97872d 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -853,19 +853,13 @@ func (k *NaclEncryptionInfo) ToPacket() (ret *KeybasePacket, err error) {
 // DecryptFromString decrypts the output of EncryptToString above,
 // and returns the KID of the other end.
 func (k NaclDHKeyPair) DecryptFromString(ciphertext string) (msg []byte, sender keybase1.KID, err error) {
-	var kbp *KeybasePacket
-	var nei *NaclEncryptionInfo
-	var ok bool
+	var nei NaclEncryptionInfo
 
-	if kbp, err = DecodeArmoredPacket(ciphertext); err != nil {
+	if nei, err = DecodeArmoredNaclEncryptionInfoPacket(ciphertext); err != nil {
 		return
 	}
 
-	if nei, ok = kbp.Body.(*NaclEncryptionInfo); !ok {
-		err = UnmarshalError{TagEncryption}
-		return
-	}
-	return k.Decrypt(nei)
+	return k.Decrypt(&nei)
 }
 
 // Decrypt a NaclEncryptionInfo packet, and on success return the plaintext

From 1adea7286f3bd98306ec250e046bb9148c839a33 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:34:58 -0700
Subject: [PATCH 08/39] Pull out SKB

---
 go/libkb/kbpackets.go   | 17 +++++++++++++++++
 go/libkb/skb.go         |  8 --------
 go/libkb/sync_secret.go | 13 ++-----------
 3 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 4a34ea8d824..124b70295b0 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -328,6 +328,23 @@ func DecodeArmoredPacketBody(s string, tag PacketTag, body interface{}) error {
 	return DecodePacketBody(b, tag, body)
 }
 
+func DecodeSKBPacket(data []byte) (*SKB, error) {
+	var info SKB
+	err := DecodePacketBody(data, TagP3skb, &info)
+	if err != nil {
+		return nil, err
+	}
+	return &info, nil
+}
+
+func DecodeArmoredSKBPacket(s string) (*SKB, error) {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return nil, err
+	}
+	return DecodeSKBPacket(b)
+}
+
 func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
 	var info NaclSigInfo
 	err := DecodePacketBody(data, TagSignature, &info)
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index ebe16bbb675..fb8cdcf7c0d 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -374,14 +374,6 @@ func (s *SKB) SetUID(uid keybase1.UID) {
 	s.Unlock()
 }
 
-func (p KeybasePacket) ToSKB() (*SKB, error) {
-	ret, ok := p.Body.(*SKB)
-	if !ok {
-		return nil, UnmarshalError{TagP3skb}
-	}
-	return ret, nil
-}
-
 func (s *SKB) ArmoredEncode() (ret string, err error) {
 	return PacketArmoredEncode(s)
 }
diff --git a/go/libkb/sync_secret.go b/go/libkb/sync_secret.go
index 0d85ba0e056..f81525c46a0 100644
--- a/go/libkb/sync_secret.go
+++ b/go/libkb/sync_secret.go
@@ -213,14 +213,9 @@ func (k *ServerPrivateKey) FindActiveKey(g *GlobalContext, ckf *ComputedKeyFamil
 	if ckf.GetKeyRole(kid) != DLGSibkey {
 		return
 	}
-	var packet *KeybasePacket
-	if packet, err = DecodeArmoredPacket(k.Bundle); err != nil && packet == nil {
+	if ret, err = DecodeArmoredSKBPacket(k.Bundle); err != nil {
 		return
 	}
-	ret, err = packet.ToSKB()
-	if err != nil {
-		return nil, err
-	}
 	ret.SetGlobalContext(g)
 	return ret, nil
 }
@@ -352,14 +347,10 @@ func (k ServerPrivateKey) ToSKB(gc *GlobalContext) (*SKB, error) {
 	if k.KeyType != KeyTypeP3skbPrivate {
 		return nil, fmt.Errorf("invalid key type for skb conversion: %d", k.KeyType)
 	}
-	p, err := DecodeArmoredPacket(k.Bundle)
+	skb, err := DecodeArmoredSKBPacket(k.Bundle)
 	if err != nil {
 		return nil, err
 	}
-	skb, ok := p.Body.(*SKB)
-	if !ok {
-		return nil, fmt.Errorf("invalid packet type: %T", p.Body)
-	}
 	return skb, nil
 }
 

From a3c07045820e9ba779a68e285fca59488370625d Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:35:36 -0700
Subject: [PATCH 09/39] Remove unneeded

---
 go/libkb/kbpackets.go | 17 -----------------
 1 file changed, 17 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 124b70295b0..8eff3b4c3d2 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -297,23 +297,6 @@ func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag
 	return p.checkHash()
 }
 
-func DecodeArmoredPacket(s string) (*KeybasePacket, error) {
-	b, err := base64.StdEncoding.DecodeString(s)
-	if err != nil {
-		return nil, err
-	}
-	return DecodePacket(b)
-}
-
-func DecodePacket(data []byte) (ret *KeybasePacket, err error) {
-	ret = &KeybasePacket{}
-	err = ret.unmarshalBinary(data)
-	if err != nil {
-		ret = nil
-	}
-	return
-}
-
 func DecodePacketBody(data []byte, tag PacketTag, body interface{}) error {
 	var p KeybasePacket
 	p.Body = body

From 321d4562cba9e08d22389a099177035b3a9cf594 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:36:32 -0700
Subject: [PATCH 10/39] Remove

---
 go/libkb/kbpackets.go | 26 --------------------------
 1 file changed, 26 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 8eff3b4c3d2..90a4cd9f7ba 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -243,32 +243,6 @@ func (p *KeybasePacket) unpackBody(ch *codec.MsgpackHandle) error {
 	return nil
 }
 
-func (p *KeybasePacket) unmarshalBinary(data []byte) error {
-	ch := codecHandle()
-	if err := MsgpackDecodeAll(data, ch, p); err != nil {
-		return err
-	}
-
-	if err := p.unpackBody(ch); err != nil {
-		return err
-	}
-
-	// Test for nonstandard msgpack data (which could be maliciously crafted)
-	// by re-encoding and making sure we get the same thing.
-	// https://github.com/keybase/client/issues/423
-	//
-	// Ideally this should be done at a lower level, like MsgpackDecodeAll, but
-	// our msgpack library doesn't sort maps the way we expect. See
-	// https://github.com/ugorji/go/issues/103
-	if reencoded, err := p.Encode(); err != nil {
-		return err
-	} else if !bytes.Equal(reencoded, data) {
-		return FishyMsgpackError{data, reencoded}
-	}
-
-	return p.checkHash()
-}
-
 func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag, body interface{}) error {
 	ch := codecHandle()
 	p.Body = body

From 2c4d40badde468c0a7ae316a97a430fdb8e7c031 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:57:33 -0700
Subject: [PATCH 11/39] Decode into bytes

---
 go/libkb/kbpackets.go | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 90a4cd9f7ba..1128e9768df 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -245,11 +245,18 @@ func (p *KeybasePacket) unpackBody(ch *codec.MsgpackHandle) error {
 
 func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag, body interface{}) error {
 	ch := codecHandle()
+	decoder := codec.NewDecoderBytes(data, ch)
+
 	p.Body = body
-	if err := MsgpackDecodeAll(data, ch, p); err != nil {
+	err := decoder.Decode(p)
+	if err != nil {
 		return err
 	}
 
+	if decoder.NumBytesRead() != len(data) {
+		return fmt.Errorf("Did not consume entire buffer: %d byte(s) left", len(data)-decoder.NumBytesRead())
+	}
+
 	if p.Tag != tag {
 		return UnmarshalError{tag}
 		//return fmt.Errorf("Expected tag %d, got %d", tag, p.Tag)

From 7df7176c9b31771920c8f7228472c5921c27e964 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:58:45 -0700
Subject: [PATCH 12/39] Rem

---
 go/libkb/naclwrap.go | 8 --------
 1 file changed, 8 deletions(-)

diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index 91fee97872d..68d08ca86f9 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -490,14 +490,6 @@ func (s *NaclSigInfo) ToPacket() (ret *KeybasePacket, err error) {
 	return NewKeybasePacket(s, TagSignature, KeybasePacketV1)
 }
 
-func (p KeybasePacket) ToNaclSigInfo() (*NaclSigInfo, error) {
-	ret, ok := p.Body.(*NaclSigInfo)
-	if !ok {
-		return nil, UnmarshalError{TagSignature}
-	}
-	return ret, nil
-}
-
 func KIDToNaclSigningKeyPublic(bk []byte) *NaclSigningKeyPublic {
 	if len(bk) != 3+ed25519.PublicKeySize {
 		return nil

From 49cf4aeb91dc0879dfe549339c6a0718eef48dcf Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 17:59:54 -0700
Subject: [PATCH 13/39] Fix unmarshalerror

---
 go/libkb/errors.go    | 5 +++--
 go/libkb/kbpackets.go | 3 +--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/go/libkb/errors.go b/go/libkb/errors.go
index 59c79e818e3..efc5d3f1991 100644
--- a/go/libkb/errors.go
+++ b/go/libkb/errors.go
@@ -734,11 +734,12 @@ func NewNoUsernameError() NoUsernameError { return NoUsernameError{} }
 //=============================================================================
 
 type UnmarshalError struct {
-	Tag PacketTag
+	ExpectedTag PacketTag
+	Tag         PacketTag
 }
 
 func (u UnmarshalError) Error() string {
-	return "Bad " + u.Tag.String() + " packet"
+	return fmt.Sprintf("Expected %s packet, got %s packet", u.ExpectedTag, u.Tag)
 }
 
 type VerificationError struct {
diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 1128e9768df..371838d60e0 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -258,8 +258,7 @@ func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag
 	}
 
 	if p.Tag != tag {
-		return UnmarshalError{tag}
-		//return fmt.Errorf("Expected tag %d, got %d", tag, p.Tag)
+		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
 	}
 
 	// Test for nonstandard msgpack data (which could be maliciously crafted)

From e563c707cf06c60b82cfccf763936231bd50e0d3 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:18:47 -0700
Subject: [PATCH 14/39] Use better unmarshal

---
 go/libkb/kbpackets.go   | 14 ++++++++++
 go/libkb/skb_keyring.go | 62 ++++++++++++++++++++++++++++++++---------
 go/libkb/skb_test.go    | 10 ++-----
 3 files changed, 66 insertions(+), 20 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 371838d60e0..699a7fdb534 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -243,6 +243,20 @@ func (p *KeybasePacket) unpackBody(ch *codec.MsgpackHandle) error {
 	return nil
 }
 
+func (p *KeybasePacket) unmarshalBinaryStreamWithTagAndBody(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
+	p.Body = body
+	err := decoder.Decode(p)
+	if err != nil {
+		return err
+	}
+
+	if p.Tag != tag {
+		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
+	}
+
+	return p.checkHash()
+}
+
 func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag, body interface{}) error {
 	ch := codecHandle()
 	decoder := codec.NewDecoderBytes(data, ch)
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 819c950c8e1..843c3d31206 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -9,6 +9,7 @@ import (
 	"time"
 
 	keybase1 "github.com/keybase/client/go/protocol/keybase1"
+	"github.com/keybase/go-codec/codec"
 )
 
 type SKBKeyringFile struct {
@@ -64,19 +65,41 @@ func (k *SKBKeyringFile) MarkDirty() {
 	k.dirty = true
 }
 
+type skbPacket struct {
+	skb SKB
+}
+
+func (s *skbPacket) CodecEncodeSelf(e *codec.Encoder) {
+	panic("skbPacket.CodecEncodeSelf unexpectedly called")
+}
+
+func (s *skbPacket) CodecDecodeSelf(d *codec.Decoder) {
+	var p KeybasePacket
+	p.unmarshalBinaryStreamWithTagAndBody(d, TagP3skb, &s.skb)
+}
+
+func decodeSKBPacketList(r io.Reader, g *GlobalContext) ([]*SKB, error) {
+	ch := codecHandle()
+	decoder := codec.NewDecoder(r, ch)
+
+	var packets []skbPacket
+	err := decoder.Decode(&packets)
+	if err != nil {
+		return nil, err
+	}
+
+	skbs := make([]*SKB, len(packets))
+	for i, s := range packets {
+		s.skb.SetGlobalContext(g)
+		skbs[i] = &s.skb
+	}
+	return skbs, nil
+}
+
 func (k *SKBKeyringFile) loadLocked() (err error) {
 	k.G().Log.Debug("+ Loading SKB keyring: %s", k.filename)
-	var packets KeybasePackets
-	var file *os.File
-	if file, err = os.OpenFile(k.filename, os.O_RDONLY, 0); err == nil {
-		stream := base64.NewDecoder(base64.StdEncoding, file)
-		packets, err = DecodePacketsUnchecked(stream)
-		tmp := file.Close()
-		if err == nil && tmp != nil {
-			err = tmp
-		}
-	}
 
+	file, err := os.OpenFile(k.filename, os.O_RDONLY, 0)
 	if err != nil {
 		if os.IsNotExist(err) {
 			k.G().Log.Debug("| Keybase secret keyring doesn't exist: %s", k.filename)
@@ -85,12 +108,25 @@ func (k *SKBKeyringFile) loadLocked() (err error) {
 
 			MobilePermissionDeniedCheck(k.G(), err, fmt.Sprintf("skb keyring: %s", k.filename))
 		}
-	} else if err == nil {
-		k.Blocks, err = packets.ToListOfSKBs(k.G())
+		return err
 	}
+	defer func() {
+		closeErr := file.Close()
+		if err == nil {
+			err = closeErr
+		}
+	}()
+
+	stream := base64.NewDecoder(base64.StdEncoding, file)
+	skbs, err := decodeSKBPacketList(stream, k.G())
+	if err != nil {
+		return err
+	}
+
+	k.Blocks = skbs
 
 	k.G().Log.Debug("- Loaded SKB keyring: %s -> %s", k.filename, ErrToOk(err))
-	return
+	return nil
 }
 
 func (k *SKBKeyringFile) addToIndexLocked(g GenericKey, b *SKB) {
diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index 83d89bcc4df..fcc7a670f24 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -53,16 +53,12 @@ func TestDecodeSKBSequence(t *testing.T) {
 	seq := ""
 	buf := bytes.NewBufferString(seq)
 	decoder := base64.NewDecoder(base64.StdEncoding, buf)
-	packets, err := DecodePacketsUnchecked(decoder)
+	p3skbs, err := decodeSKBPacketList(decoder, nil)
 	if err != nil {
-		t.Errorf("Failed to decode packets: %s", err)
-	}
-	p3skbs, err := packets.ToListOfSKBs(nil)
-	if err != nil {
-		t.Errorf("Failed to make a list of SKBs: %s", err)
+		t.Fatalf("Failed to decode packets: %s", err)
 	}
 	if !FastByteArrayEq(p3skbs[1].Pub, p3skbs[0].Pub) {
-		t.Errorf("Expected a repeat of the same key")
+		t.Fatalf("Expected a repeat of the same key")
 	}
 }
 

From 50d74193f1fe24d06cddfc9200cd29242658f2ea Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:21:11 -0700
Subject: [PATCH 15/39] Fix test

---
 go/libkb/skb_test.go | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index fcc7a670f24..bfcde45ff12 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -10,6 +10,7 @@ import (
 	"time"
 
 	"github.com/keybase/clockwork"
+	"github.com/stretchr/testify/require"
 
 	keybase1 "github.com/keybase/client/go/protocol/keybase1"
 	"github.com/keybase/go-codec/codec"
@@ -54,11 +55,10 @@ func TestDecodeSKBSequence(t *testing.T) {
 	buf := bytes.NewBufferString(seq)
 	decoder := base64.NewDecoder(base64.StdEncoding, buf)
 	p3skbs, err := decodeSKBPacketList(decoder, nil)
-	if err != nil {
-		t.Fatalf("Failed to decode packets: %s", err)
-	}
-	if !FastByteArrayEq(p3skbs[1].Pub, p3skbs[0].Pub) {
-		t.Fatalf("Expected a repeat of the same key")
+	require.NoError(t, err)
+	require.Equal(t, 3, len(p3skbs))
+	for _, p3skb := range p3skbs {
+		require.Equal(t, p3skbs[0], p3skb)
 	}
 }
 

From 051ef89456259c9bec297ae077305ad9a0102bb9 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:21:40 -0700
Subject: [PATCH 16/39] Remove

---
 go/libkb/kbpackets.go | 16 ----------------
 1 file changed, 16 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 699a7fdb534..50edca85493 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -156,22 +156,6 @@ func MsgpackEncode(src interface{}) (dst []byte, err error) {
 	return dst, err
 }
 
-// DecodePacketsUnchecked decodes an array of packets from `reader`. It does *not*
-// check that the stream was canonical msgpack.
-func DecodePacketsUnchecked(reader io.Reader) (ret KeybasePackets, err error) {
-	ch := codecHandle()
-	if err = codec.NewDecoder(reader, ch).Decode(&ret); err != nil {
-		return
-	}
-	for _, p := range ret {
-		err = p.unpackBody(ch)
-		if err != nil {
-			return
-		}
-	}
-	return
-}
-
 // Decode data into out, but make sure that all bytes in data are
 // used.
 func MsgpackDecodeAll(data []byte, handle *codec.MsgpackHandle, out interface{}) error {

From 088934f8b9477c2e07c554bfabbf1ac3ce886af4 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:21:56 -0700
Subject: [PATCH 17/39] Remove

---
 go/libkb/kbpackets.go | 58 -------------------------------------------
 1 file changed, 58 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 50edca85493..cfbe6e62f87 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -16,7 +16,6 @@ import (
 	"fmt"
 	"io"
 
-	keybase1 "github.com/keybase/client/go/protocol/keybase1"
 	"github.com/keybase/go-codec/codec"
 )
 
@@ -170,63 +169,6 @@ func MsgpackDecodeAll(data []byte, handle *codec.MsgpackHandle, out interface{})
 	return nil
 }
 
-func (p *KeybasePacket) unpackBody(ch *codec.MsgpackHandle) error {
-	var body interface{}
-
-	mb, ok := p.Body.(map[interface{}]interface{})
-	if !ok {
-		return errors.New("body not a generic map")
-	}
-
-	skipEncode := false
-
-	switch p.Tag {
-	case TagP3skb:
-		// We can't use this SKB until it's been SetContext'ed
-		body = NewSKB()
-	case TagSignature:
-		si := &NaclSigInfo{
-			Kid:      keybase1.BinaryKID(mb["key"].([]byte)),
-			Payload:  mb["payload"].([]byte),
-			HashType: int(mb["hash_type"].(int64)),
-			Detached: mb["detached"].(bool),
-		}
-
-		if sig, ok := mb["sig"].([]byte); ok {
-			copy(si.Sig[:], sig)
-		}
-		if st, ok := mb["sig_type"].(int64); ok {
-			si.SigType = AlgoType(st)
-		}
-		if v, ok := mb["version"].(int64); ok {
-			si.Version = int(v)
-		}
-		if p, ok := mb["prefix"].(SignaturePrefix); ok {
-			si.Prefix = p
-		}
-
-		p.Body = si
-		skipEncode = true
-	case TagEncryption:
-		body = &NaclEncryptionInfo{}
-	default:
-		return fmt.Errorf("Unknown packet tag: %d", p.Tag)
-	}
-
-	if !skipEncode {
-		var encoded []byte
-		if err := codec.NewEncoderBytes(&encoded, ch).Encode(p.Body); err != nil {
-			return err
-		}
-		if err := MsgpackDecodeAll(encoded, ch, body); err != nil {
-			return err
-		}
-		p.Body = body
-	}
-
-	return nil
-}
-
 func (p *KeybasePacket) unmarshalBinaryStreamWithTagAndBody(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
 	p.Body = body
 	err := decoder.Decode(p)

From 826b90687466e0e518aa73415ddac63231c2b9f4 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:24:32 -0700
Subject: [PATCH 18/39] Fix TODO

---
 go/libkb/kbpackets.go | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index cfbe6e62f87..38bacb0db31 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -205,8 +205,8 @@ func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag
 	// by re-encoding and making sure we get the same thing.
 	// https://github.com/keybase/client/issues/423
 	//
-	// Ideally this should be done at a lower level, like MsgpackDecodeAll, but
-	// our msgpack library doesn't sort maps the way we expect. See
+	// Ideally this should be done at a lower level, but our
+	// msgpack library doesn't sort maps the way we expect. See
 	// https://github.com/ugorji/go/issues/103
 	if reencoded, err := p.Encode(); err != nil {
 		return err

From 942aac031e1913447d491e7b9d672700ac1f9a0e Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:27:14 -0700
Subject: [PATCH 19/39] Move into msgpack

---
 go/libkb/kbpackets.go | 25 -------------------------
 go/libkb/msgpack.go   | 36 ++++++++++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+), 25 deletions(-)
 create mode 100644 go/libkb/msgpack.go

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 38bacb0db31..6edd9b9df90 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -144,31 +144,6 @@ func (p KeybasePackets) EncodeTo(w io.Writer) error {
 	return err
 }
 
-func MsgpackDecode(dst interface{}, src []byte) (err error) {
-	ch := codecHandle()
-	return codec.NewDecoderBytes(src, ch).Decode(dst)
-}
-
-func MsgpackEncode(src interface{}) (dst []byte, err error) {
-	ch := codecHandle()
-	err = codec.NewEncoderBytes(&dst, ch).Encode(src)
-	return dst, err
-}
-
-// Decode data into out, but make sure that all bytes in data are
-// used.
-func MsgpackDecodeAll(data []byte, handle *codec.MsgpackHandle, out interface{}) error {
-	buf := bytes.NewBuffer(data)
-	err := codec.NewDecoder(buf, handle).Decode(out)
-	if err != nil {
-		return err
-	}
-	if buf.Len() > 0 {
-		return fmt.Errorf("Did not consume entire buffer: %d byte(s) left", buf.Len())
-	}
-	return nil
-}
-
 func (p *KeybasePacket) unmarshalBinaryStreamWithTagAndBody(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
 	p.Body = body
 	err := decoder.Decode(p)
diff --git a/go/libkb/msgpack.go b/go/libkb/msgpack.go
new file mode 100644
index 00000000000..1fa5e4d4ff6
--- /dev/null
+++ b/go/libkb/msgpack.go
@@ -0,0 +1,36 @@
+// Copyright 2018 Keybase, Inc. All rights reserved. Use of
+// this source code is governed by the included BSD license.
+
+package libkb
+
+import (
+	"fmt"
+
+	"github.com/keybase/go-codec/codec"
+)
+
+func MsgpackDecode(dst interface{}, src []byte) (err error) {
+	ch := codecHandle()
+	return codec.NewDecoderBytes(src, ch).Decode(dst)
+}
+
+func MsgpackEncode(src interface{}) (dst []byte, err error) {
+	ch := codecHandle()
+	err = codec.NewEncoderBytes(&dst, ch).Encode(src)
+	return dst, err
+}
+
+// Decode data into out, but make sure that all bytes in data are
+// used.
+func MsgpackDecodeAll(data []byte, handle *codec.MsgpackHandle, out interface{}) error {
+	decoder := codec.NewDecoderBytes(data, handle)
+	err := decoder.Decode(out)
+	if err != nil {
+		return err
+	}
+
+	if decoder.NumBytesRead() != len(data) {
+		return fmt.Errorf("Did not consume entire buffer: %d byte(s) left", len(data)-decoder.NumBytesRead())
+	}
+	return nil
+}

From 187280497da4a323cf0adb0c24220b6c9b49db67 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:29:08 -0700
Subject: [PATCH 20/39] Rename

---
 go/libkb/kbpackets.go   | 8 +++++---
 go/libkb/skb_keyring.go | 6 ++++--
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 6edd9b9df90..f37a1cc2793 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -144,9 +144,11 @@ func (p KeybasePackets) EncodeTo(w io.Writer) error {
 	return err
 }
 
-func (p *KeybasePacket) unmarshalBinaryStreamWithTagAndBody(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
-	p.Body = body
-	err := decoder.Decode(p)
+func DecodePacket(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
+	p := KeybasePacket{
+		Body: body,
+	}
+	err := decoder.Decode(&p)
 	if err != nil {
 		return err
 	}
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 843c3d31206..aaa2546cd1f 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -74,8 +74,10 @@ func (s *skbPacket) CodecEncodeSelf(e *codec.Encoder) {
 }
 
 func (s *skbPacket) CodecDecodeSelf(d *codec.Decoder) {
-	var p KeybasePacket
-	p.unmarshalBinaryStreamWithTagAndBody(d, TagP3skb, &s.skb)
+	err := DecodePacket(d, TagP3skb, &s.skb)
+	if err != nil {
+		panic(err)
+	}
 }
 
 func decodeSKBPacketList(r io.Reader, g *GlobalContext) ([]*SKB, error) {

From 22efbdfd979f0404ce39d9ea8d4eaa6e5681702a Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:33:40 -0700
Subject: [PATCH 21/39] Cleanup

---
 go/libkb/kbpackets.go | 26 +++++++-------------------
 go/libkb/skb_test.go  |  3 +--
 2 files changed, 8 insertions(+), 21 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index f37a1cc2793..6239377f5b5 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -160,11 +160,13 @@ func DecodePacket(decoder *codec.Decoder, tag PacketTag, body interface{}) error
 	return p.checkHash()
 }
 
-func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag, body interface{}) error {
+func DecodePacketBytes(data []byte, tag PacketTag, body interface{}) error {
 	ch := codecHandle()
 	decoder := codec.NewDecoderBytes(data, ch)
 
-	p.Body = body
+	p := KeybasePacket{
+		Body: body,
+	}
 	err := decoder.Decode(p)
 	if err != nil {
 		return err
@@ -194,23 +196,9 @@ func (p *KeybasePacket) unmarshalBinaryWithTagAndBody(data []byte, tag PacketTag
 	return p.checkHash()
 }
 
-func DecodePacketBody(data []byte, tag PacketTag, body interface{}) error {
-	var p KeybasePacket
-	p.Body = body
-	return p.unmarshalBinaryWithTagAndBody(data, tag, body)
-}
-
-func DecodeArmoredPacketBody(s string, tag PacketTag, body interface{}) error {
-	b, err := base64.StdEncoding.DecodeString(s)
-	if err != nil {
-		return err
-	}
-	return DecodePacketBody(b, tag, body)
-}
-
 func DecodeSKBPacket(data []byte) (*SKB, error) {
 	var info SKB
-	err := DecodePacketBody(data, TagP3skb, &info)
+	err := DecodePacketBytes(data, TagP3skb, &info)
 	if err != nil {
 		return nil, err
 	}
@@ -227,7 +215,7 @@ func DecodeArmoredSKBPacket(s string) (*SKB, error) {
 
 func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
 	var info NaclSigInfo
-	err := DecodePacketBody(data, TagSignature, &info)
+	err := DecodePacketBytes(data, TagSignature, &info)
 	if err != nil {
 		return NaclSigInfo{}, err
 	}
@@ -244,7 +232,7 @@ func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
 
 func DecodeNaclEncryptionInfoPacket(data []byte) (NaclEncryptionInfo, error) {
 	var info NaclEncryptionInfo
-	err := DecodePacketBody(data, TagEncryption, &info)
+	err := DecodePacketBytes(data, TagEncryption, &info)
 	if err != nil {
 		return NaclEncryptionInfo{}, err
 	}
diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index bfcde45ff12..9898fdb7e64 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -43,8 +43,7 @@ func TestDecode0(t *testing.T) {
 
 func TestDecode1(t *testing.T) {
 	key := ""
-	var skb SKB
-	err := DecodeArmoredPacketBody(key, TagP3skb, &skb)
+	_, err := DecodeArmoredSKBPacket(key)
 	if err != nil {
 		t.Errorf("Failed to decode packet: %s", err)
 	}

From 5ac0a493927344f935946a2b4878fd2f7429bfc8 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 18:49:29 -0700
Subject: [PATCH 22/39] Rem more code

---
 go/libkb/kbpackets.go   | 19 +++----------------
 go/libkb/skb.go         | 13 -------------
 go/libkb/skb_keyring.go |  5 +++--
 3 files changed, 6 insertions(+), 31 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 6239377f5b5..c56b0a240e4 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -48,7 +48,9 @@ type KeybasePacket struct {
 	Version PacketVersion      `codec:"version"`
 }
 
-type KeybasePackets []*KeybasePacket
+type Packetable interface {
+	ToPacket() (*KeybasePacket, error)
+}
 
 func NewKeybasePacket(body interface{}, tag PacketTag, version PacketVersion) (*KeybasePacket, error) {
 	ret := KeybasePacket{
@@ -133,17 +135,6 @@ func (p *KeybasePacket) EncodeTo(w io.Writer) error {
 	return err
 }
 
-func (p KeybasePackets) Encode() ([]byte, error) {
-	var encoded []byte
-	err := codec.NewEncoderBytes(&encoded, codecHandle()).Encode(p)
-	return encoded, err
-}
-
-func (p KeybasePackets) EncodeTo(w io.Writer) error {
-	err := codec.NewEncoder(w, codecHandle()).Encode(p)
-	return err
-}
-
 func DecodePacket(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
 	p := KeybasePacket{
 		Body: body,
@@ -247,10 +238,6 @@ func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error)
 	return DecodeNaclEncryptionInfoPacket(b)
 }
 
-type Packetable interface {
-	ToPacket() (*KeybasePacket, error)
-}
-
 func PacketArmoredEncode(p Packetable) (ret string, err error) {
 	var tmp *KeybasePacket
 	if tmp, err = p.ToPacket(); err == nil {
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index fb8cdcf7c0d..6e4278fe75d 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -378,19 +378,6 @@ func (s *SKB) ArmoredEncode() (ret string, err error) {
 	return PacketArmoredEncode(s)
 }
 
-func (p KeybasePackets) ToListOfSKBs(g *GlobalContext) ([]*SKB, error) {
-	ret := make([]*SKB, len(p))
-	for i, e := range p {
-		k, ok := e.Body.(*SKB)
-		if !ok {
-			return nil, fmt.Errorf("Bad SKB sequence; got packet of wrong type %T", e.Body)
-		}
-		k.SetGlobalContext(g)
-		ret[i] = k
-	}
-	return ret, nil
-}
-
 func (s *SKB) UnlockWithStoredSecret(m MetaContext, secretRetriever SecretRetriever) (ret GenericKey, err error) {
 	defer m.CTrace("SKB#UnlockWithStoredSecret()", func() error { return err })()
 	if ret = s.decryptedSecret; ret != nil {
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index aaa2546cd1f..67f34a0f716 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -353,7 +353,7 @@ func (k *SKBKeyringFile) GetFilename() string { return k.filename }
 func (k *SKBKeyringFile) WriteTo(w io.Writer) (int64, error) {
 	k.G().Log.Debug("+ SKBKeyringFile WriteTo")
 	defer k.G().Log.Debug("- SKBKeyringFile WriteTo")
-	packets := make(KeybasePackets, len(k.Blocks))
+	packets := make([]*KeybasePacket, len(k.Blocks))
 	var err error
 	for i, b := range k.Blocks {
 		if packets[i], err = b.ToPacket(); err != nil {
@@ -363,7 +363,8 @@ func (k *SKBKeyringFile) WriteTo(w io.Writer) (int64, error) {
 	b64 := base64.NewEncoder(base64.StdEncoding, w)
 	defer b64.Close()
 
-	if err = packets.EncodeTo(b64); err != nil {
+	encoder := codec.NewEncoder(b64, codecHandle())
+	if err = encoder.Encode(packets); err != nil {
 		k.G().Log.Warning("Encoding problem: %s", err)
 		return 0, err
 	}

From 8ae1a9ca41e8bf6c9fa517f8cb90dcaa10a6ae38 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 22:52:37 -0700
Subject: [PATCH 23/39] Rework

---
 go/libkb/kbpackets.go | 12 +++++++-----
 go/libkb/naclwrap.go  |  8 ++++++++
 go/libkb/skb.go       |  4 ++++
 3 files changed, 19 insertions(+), 5 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index c56b0a240e4..b4601031eeb 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -49,6 +49,7 @@ type KeybasePacket struct {
 }
 
 type Packetable interface {
+	GetTagAndVersion() (PacketTag, PacketVersion)
 	ToPacket() (*KeybasePacket, error)
 }
 
@@ -238,10 +239,11 @@ func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error)
 	return DecodeNaclEncryptionInfoPacket(b)
 }
 
-func PacketArmoredEncode(p Packetable) (ret string, err error) {
-	var tmp *KeybasePacket
-	if tmp, err = p.ToPacket(); err == nil {
-		ret, err = tmp.ArmoredEncode()
+func PacketArmoredEncode(p Packetable) (string, error) {
+	tag, version := p.GetTagAndVersion()
+	packet, err := NewKeybasePacket(p, tag, version)
+	if err != nil {
+		return "", err
 	}
-	return
+	return packet.ArmoredEncode()
 }
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index 68d08ca86f9..8164a691b5d 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -486,6 +486,10 @@ func (k NaclDHKeyPair) VerifyString(ctx VerifyContext, sig string, msg []byte) (
 	return
 }
 
+func (s *NaclSigInfo) GetTagAndVersion() (PacketTag, PacketVersion) {
+	return TagSignature, KeybasePacketV1
+}
+
 func (s *NaclSigInfo) ToPacket() (ret *KeybasePacket, err error) {
 	return NewKeybasePacket(s, TagSignature, KeybasePacketV1)
 }
@@ -837,6 +841,10 @@ func DeriveFromSecret(inKey [32]byte, reason DeriveReason) (outKey [32]byte, err
 	return outKey, nil
 }
 
+func (k *NaclEncryptionInfo) GetTagAndVersion() (PacketTag, PacketVersion) {
+	return TagEncryption, KeybasePacketV1
+}
+
 // ToPacket implements the Packetable interface.
 func (k *NaclEncryptionInfo) ToPacket() (ret *KeybasePacket, err error) {
 	return NewKeybasePacket(k, TagEncryption, KeybasePacketV1)
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index 6e4278fe75d..5b76fb269d3 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -131,6 +131,10 @@ func (s *SKB) newLKSec(pps *PassphraseStream) *LKSec {
 	return NewLKSec(pps, s.uid)
 }
 
+func (s *SKB) GetTagAndVersion() (PacketTag, PacketVersion) {
+	return TagP3skb, KeybasePacketV1
+}
+
 func (s *SKB) ToPacket() (ret *KeybasePacket, err error) {
 	return NewKeybasePacket(s, TagP3skb, KeybasePacketV1)
 }

From e3b8010710ef32a94b6f91fdb1899cab4975c127 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 22:56:12 -0700
Subject: [PATCH 24/39] Change Packetable

---
 go/libkb/kbpackets.go      | 13 ++++++-------
 go/libkb/kbpackets_test.go |  3 ++-
 go/libkb/naclwrap.go       | 11 +----------
 go/libkb/skb.go            |  4 ----
 go/libkb/skb_keyring.go    |  2 +-
 5 files changed, 10 insertions(+), 23 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index b4601031eeb..95ce30556db 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -42,7 +42,7 @@ type KeybasePacketHash struct {
 }
 
 type KeybasePacket struct {
-	Body    interface{}        `codec:"body"`
+	Body    Packetable         `codec:"body"`
 	Hash    *KeybasePacketHash `codec:"hash,omitempty"`
 	Tag     PacketTag          `codec:"tag"`
 	Version PacketVersion      `codec:"version"`
@@ -50,10 +50,10 @@ type KeybasePacket struct {
 
 type Packetable interface {
 	GetTagAndVersion() (PacketTag, PacketVersion)
-	ToPacket() (*KeybasePacket, error)
 }
 
-func NewKeybasePacket(body interface{}, tag PacketTag, version PacketVersion) (*KeybasePacket, error) {
+func NewKeybasePacket(body Packetable) (*KeybasePacket, error) {
+	tag, version := body.GetTagAndVersion()
 	ret := KeybasePacket{
 		Body:    body,
 		Tag:     tag,
@@ -136,7 +136,7 @@ func (p *KeybasePacket) EncodeTo(w io.Writer) error {
 	return err
 }
 
-func DecodePacket(decoder *codec.Decoder, tag PacketTag, body interface{}) error {
+func DecodePacket(decoder *codec.Decoder, tag PacketTag, body Packetable) error {
 	p := KeybasePacket{
 		Body: body,
 	}
@@ -152,7 +152,7 @@ func DecodePacket(decoder *codec.Decoder, tag PacketTag, body interface{}) error
 	return p.checkHash()
 }
 
-func DecodePacketBytes(data []byte, tag PacketTag, body interface{}) error {
+func DecodePacketBytes(data []byte, tag PacketTag, body Packetable) error {
 	ch := codecHandle()
 	decoder := codec.NewDecoderBytes(data, ch)
 
@@ -240,8 +240,7 @@ func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error)
 }
 
 func PacketArmoredEncode(p Packetable) (string, error) {
-	tag, version := p.GetTagAndVersion()
-	packet, err := NewKeybasePacket(p, tag, version)
+	packet, err := NewKeybasePacket(p)
 	if err != nil {
 		return "", err
 	}
diff --git a/go/libkb/kbpackets_test.go b/go/libkb/kbpackets_test.go
index abda510d331..3bfbcc14254 100644
--- a/go/libkb/kbpackets_test.go
+++ b/go/libkb/kbpackets_test.go
@@ -67,7 +67,8 @@ tuX4LPcEa+72KyrsweuAJravU8SjgL/gAKhzaWdfdHlwZSCjdGFnzQICp3ZlcnNpb24B
 // Guard against unexpected codec encoding changes, in particular for
 // ints.
 func TestHardcodedPacketEncode(t *testing.T) {
-	p, err := NewKeybasePacket(nil, TagSignature, KeybasePacketV1)
+	var info NaclSigInfo
+	p, err := NewKeybasePacket(&info)
 	require.NoError(t, err)
 
 	p.Hash = nil
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index 8164a691b5d..998875dabdb 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -398,7 +398,7 @@ func (k NaclSigningKeyPair) SignToString(msg []byte) (sig string, id keybase1.Si
 		return
 	}
 
-	packet, err := naclSig.ToPacket()
+	packet, err := NewKeybasePacket(naclSig)
 	if err != nil {
 		return
 	}
@@ -490,10 +490,6 @@ func (s *NaclSigInfo) GetTagAndVersion() (PacketTag, PacketVersion) {
 	return TagSignature, KeybasePacketV1
 }
 
-func (s *NaclSigInfo) ToPacket() (ret *KeybasePacket, err error) {
-	return NewKeybasePacket(s, TagSignature, KeybasePacketV1)
-}
-
 func KIDToNaclSigningKeyPublic(bk []byte) *NaclSigningKeyPublic {
 	if len(bk) != 3+ed25519.PublicKeySize {
 		return nil
@@ -845,11 +841,6 @@ func (k *NaclEncryptionInfo) GetTagAndVersion() (PacketTag, PacketVersion) {
 	return TagEncryption, KeybasePacketV1
 }
 
-// ToPacket implements the Packetable interface.
-func (k *NaclEncryptionInfo) ToPacket() (ret *KeybasePacket, err error) {
-	return NewKeybasePacket(k, TagEncryption, KeybasePacketV1)
-}
-
 // DecryptFromString decrypts the output of EncryptToString above,
 // and returns the KID of the other end.
 func (k NaclDHKeyPair) DecryptFromString(ciphertext string) (msg []byte, sender keybase1.KID, err error) {
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index 5b76fb269d3..cc241cba778 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -135,10 +135,6 @@ func (s *SKB) GetTagAndVersion() (PacketTag, PacketVersion) {
 	return TagP3skb, KeybasePacketV1
 }
 
-func (s *SKB) ToPacket() (ret *KeybasePacket, err error) {
-	return NewKeybasePacket(s, TagP3skb, KeybasePacketV1)
-}
-
 func (s *SKB) ReadKey() (g GenericKey, err error) {
 	switch {
 	case IsPGPAlgo(s.Type):
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 67f34a0f716..544952d8921 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -356,7 +356,7 @@ func (k *SKBKeyringFile) WriteTo(w io.Writer) (int64, error) {
 	packets := make([]*KeybasePacket, len(k.Blocks))
 	var err error
 	for i, b := range k.Blocks {
-		if packets[i], err = b.ToPacket(); err != nil {
+		if packets[i], err = NewKeybasePacket(b); err != nil {
 			return 0, err
 		}
 	}

From 82ac2906062ff7a942053ef5c39c5278824af57d Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 22:56:36 -0700
Subject: [PATCH 25/39] Fix comment

---
 go/libkb/kbpackets.go | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 95ce30556db..0cea8710f50 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -1,12 +1,9 @@
-// Copyright 2015 Keybase, Inc. All rights reserved. Use of
+// Copyright 2018 Keybase, Inc. All rights reserved. Use of
 // this source code is governed by the included BSD license.
 
 package libkb
 
-//
-// Code for encoding and decoding SKB-formatted keys. Also works for decoding
-// general Keybase Packet types, but we only have SKB at present
-//
+// Code for encoding and decoding Keybase packet types.
 
 import (
 	"bytes"

From 221d8df60cea9b1d7f91f785e11c0e1ce40adacb Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 22:57:54 -0700
Subject: [PATCH 26/39] Slim Decode

---
 go/libkb/kbpackets.go   | 4 +++-
 go/libkb/skb_keyring.go | 2 +-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 0cea8710f50..587bdeb59b4 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -133,7 +133,9 @@ func (p *KeybasePacket) EncodeTo(w io.Writer) error {
 	return err
 }
 
-func DecodePacket(decoder *codec.Decoder, tag PacketTag, body Packetable) error {
+func DecodePacket(decoder *codec.Decoder, body Packetable) error {
+	// TODO: Do something with the version too?
+	tag, _ := body.GetTagAndVersion()
 	p := KeybasePacket{
 		Body: body,
 	}
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 544952d8921..cf5bdf9a445 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -74,7 +74,7 @@ func (s *skbPacket) CodecEncodeSelf(e *codec.Encoder) {
 }
 
 func (s *skbPacket) CodecDecodeSelf(d *codec.Decoder) {
-	err := DecodePacket(d, TagP3skb, &s.skb)
+	err := DecodePacket(d, &s.skb)
 	if err != nil {
 		panic(err)
 	}

From 2085ace28c8667d9dd011bd1b138909270bc7b27 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 22:58:44 -0700
Subject: [PATCH 27/39] Decode

---
 go/libkb/kbpackets.go | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 587bdeb59b4..0e9418f6e74 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -151,10 +151,12 @@ func DecodePacket(decoder *codec.Decoder, body Packetable) error {
 	return p.checkHash()
 }
 
-func DecodePacketBytes(data []byte, tag PacketTag, body Packetable) error {
+func DecodePacketBytes(data []byte, body Packetable) error {
 	ch := codecHandle()
 	decoder := codec.NewDecoderBytes(data, ch)
 
+	// TODO: Do something with the version too?
+	tag, _ := body.GetTagAndVersion()
 	p := KeybasePacket{
 		Body: body,
 	}
@@ -189,7 +191,7 @@ func DecodePacketBytes(data []byte, tag PacketTag, body Packetable) error {
 
 func DecodeSKBPacket(data []byte) (*SKB, error) {
 	var info SKB
-	err := DecodePacketBytes(data, TagP3skb, &info)
+	err := DecodePacketBytes(data, &info)
 	if err != nil {
 		return nil, err
 	}
@@ -206,7 +208,7 @@ func DecodeArmoredSKBPacket(s string) (*SKB, error) {
 
 func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
 	var info NaclSigInfo
-	err := DecodePacketBytes(data, TagSignature, &info)
+	err := DecodePacketBytes(data, &info)
 	if err != nil {
 		return NaclSigInfo{}, err
 	}
@@ -223,7 +225,7 @@ func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
 
 func DecodeNaclEncryptionInfoPacket(data []byte) (NaclEncryptionInfo, error) {
 	var info NaclEncryptionInfo
-	err := DecodePacketBytes(data, TagEncryption, &info)
+	err := DecodePacketBytes(data, &info)
 	if err != nil {
 		return NaclEncryptionInfo{}, err
 	}

From d87d928af964ad6627633283e2b6ea08f8661faf Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:02:40 -0700
Subject: [PATCH 28/39] Fixup

---
 go/libkb/kbpackets.go | 32 ++++++++++++++++++++------------
 go/libkb/naclwrap.go  |  7 +------
 2 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 0e9418f6e74..1c835101ef9 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -16,6 +16,26 @@ import (
 	"github.com/keybase/go-codec/codec"
 )
 
+type Packetable interface {
+	GetTagAndVersion() (PacketTag, PacketVersion)
+}
+
+func EncodePacket(p Packetable) ([]byte, error) {
+	packet, err := NewKeybasePacket(p)
+	if err != nil {
+		return nil, err
+	}
+	return packet.Encode()
+}
+
+func PacketArmoredEncode(p Packetable) (string, error) {
+	packet, err := NewKeybasePacket(p)
+	if err != nil {
+		return "", err
+	}
+	return packet.ArmoredEncode()
+}
+
 type FishyMsgpackError struct {
 	original  []byte
 	reencoded []byte
@@ -45,10 +65,6 @@ type KeybasePacket struct {
 	Version PacketVersion      `codec:"version"`
 }
 
-type Packetable interface {
-	GetTagAndVersion() (PacketTag, PacketVersion)
-}
-
 func NewKeybasePacket(body Packetable) (*KeybasePacket, error) {
 	tag, version := body.GetTagAndVersion()
 	ret := KeybasePacket{
@@ -239,11 +255,3 @@ func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error)
 	}
 	return DecodeNaclEncryptionInfoPacket(b)
 }
-
-func PacketArmoredEncode(p Packetable) (string, error) {
-	packet, err := NewKeybasePacket(p)
-	if err != nil {
-		return "", err
-	}
-	return packet.ArmoredEncode()
-}
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index 998875dabdb..e0c629fa23d 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -398,12 +398,7 @@ func (k NaclSigningKeyPair) SignToString(msg []byte) (sig string, id keybase1.Si
 		return
 	}
 
-	packet, err := NewKeybasePacket(naclSig)
-	if err != nil {
-		return
-	}
-
-	body, err := packet.Encode()
+	body, err := EncodePacket(naclSig)
 	if err != nil {
 		return
 	}

From d96abcb0aacac7415afa5c19ad5a471c436d3192 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:10:08 -0700
Subject: [PATCH 29/39] Rewrite keyring

---
 go/libkb/kbpackets.go   | 10 +++++++++-
 go/libkb/skb_keyring.go | 36 +++++++++++++++++-------------------
 2 files changed, 26 insertions(+), 20 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 1c835101ef9..cc249daf49a 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -20,6 +20,14 @@ type Packetable interface {
 	GetTagAndVersion() (PacketTag, PacketVersion)
 }
 
+func EncodePacketTo(p Packetable, w io.Writer) error {
+	packet, err := NewKeybasePacket(p)
+	if err != nil {
+		return err
+	}
+	return packet.EncodeTo(w)
+}
+
 func EncodePacket(p Packetable) ([]byte, error) {
 	packet, err := NewKeybasePacket(p)
 	if err != nil {
@@ -136,8 +144,8 @@ func (p *KeybasePacket) Encode() ([]byte, error) {
 func (p *KeybasePacket) ArmoredEncode() (ret string, err error) {
 	var buf bytes.Buffer
 	b64 := base64.NewEncoder(base64.StdEncoding, &buf)
+	defer b64.Close()
 	err = p.EncodeTo(b64)
-	b64.Close()
 	if err == nil {
 		ret = buf.String()
 	}
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index cf5bdf9a445..1064fd2a159 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -350,31 +350,29 @@ func (k *SKBKeyringFile) GetFilename() string { return k.filename }
 
 // WriteTo is similar to GetFilename described just above in terms of
 // locking discipline.
-func (k *SKBKeyringFile) WriteTo(w io.Writer) (int64, error) {
+func (k *SKBKeyringFile) WriteTo(w io.Writer) (n int64, err error) {
 	k.G().Log.Debug("+ SKBKeyringFile WriteTo")
 	defer k.G().Log.Debug("- SKBKeyringFile WriteTo")
-	packets := make([]*KeybasePacket, len(k.Blocks))
-	var err error
+	b64 := base64.NewEncoder(base64.StdEncoding, w)
+	defer func() {
+		// explicitly check for error on Close:
+		if closeErr := b64.Close(); closeErr != nil {
+			k.G().Log.Warning("SKBKeyringFile: WriteTo b64.Close() error: %s", closeErr)
+			if err == nil {
+				err = closeErr
+				return
+			}
+		}
+		k.G().Log.Debug("SKBKeyringFile: b64 stream closed successfully")
+	}()
+
 	for i, b := range k.Blocks {
-		if packets[i], err = NewKeybasePacket(b); err != nil {
+		err = EncodePacketTo(b, b64)
+		if err != nil {
+			k.G().Log.Warning("Encoding problem for packet %d: %s", i, err)
 			return 0, err
 		}
 	}
-	b64 := base64.NewEncoder(base64.StdEncoding, w)
-	defer b64.Close()
-
-	encoder := codec.NewEncoder(b64, codecHandle())
-	if err = encoder.Encode(packets); err != nil {
-		k.G().Log.Warning("Encoding problem: %s", err)
-		return 0, err
-	}
-
-	// explicitly check for error on Close:
-	if err := b64.Close(); err != nil {
-		k.G().Log.Warning("SKBKeyringFile: WriteTo b64.Close() error: %s", err)
-		return 0, err
-	}
-	k.G().Log.Debug("SKBKeyringFile: b64 stream closed successfully")
 
 	return 0, nil
 }

From 076b9b135a50890d7a7805565370db648abf0603 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:11:26 -0700
Subject: [PATCH 30/39] Rename

---
 go/libkb/kbpackets.go    | 4 ++--
 go/libkb/naclwrap.go     | 6 +++---
 go/libkb/per_user_key.go | 2 +-
 go/libkb/skb.go          | 2 +-
 4 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index cc249daf49a..76264590e01 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -28,7 +28,7 @@ func EncodePacketTo(p Packetable, w io.Writer) error {
 	return packet.EncodeTo(w)
 }
 
-func EncodePacket(p Packetable) ([]byte, error) {
+func PacketToBytes(p Packetable) ([]byte, error) {
 	packet, err := NewKeybasePacket(p)
 	if err != nil {
 		return nil, err
@@ -36,7 +36,7 @@ func EncodePacket(p Packetable) ([]byte, error) {
 	return packet.Encode()
 }
 
-func PacketArmoredEncode(p Packetable) (string, error) {
+func PacketToArmoredString(p Packetable) (string, error) {
 	packet, err := NewKeybasePacket(p)
 	if err != nil {
 		return "", err
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index e0c629fa23d..befdd505d39 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -398,7 +398,7 @@ func (k NaclSigningKeyPair) SignToString(msg []byte) (sig string, id keybase1.Si
 		return
 	}
 
-	body, err := EncodePacket(naclSig)
+	body, err := PacketToBytes(naclSig)
 	if err != nil {
 		return
 	}
@@ -530,7 +530,7 @@ func (s NaclSigInfo) Verify() (*NaclSigningKeyPublic, error) {
 }
 
 func (s *NaclSigInfo) ArmoredEncode() (ret string, err error) {
-	return PacketArmoredEncode(s)
+	return PacketToArmoredString(s)
 }
 
 func (k NaclSigningKeyPair) ExportPublicAndPrivate() (RawPublicKey, RawPrivateKey, error) {
@@ -750,7 +750,7 @@ func (k NaclDHKeyPair) EncryptToString(plaintext []byte, sender GenericKey) (str
 		return "", err
 	}
 
-	return PacketArmoredEncode(info)
+	return PacketToArmoredString(info)
 }
 
 func (k NaclDHKeyPair) SecretSymmetricKey(reason EncryptionReason) (NaclSecretBoxKey, error) {
diff --git a/go/libkb/per_user_key.go b/go/libkb/per_user_key.go
index 5d813f14a6e..91d946a6818 100644
--- a/go/libkb/per_user_key.go
+++ b/go/libkb/per_user_key.go
@@ -66,7 +66,7 @@ func NewPerUserKeyBox(contents PerUserKeySeed, receiverKey NaclDHKeyPair, sender
 	if err != nil {
 		return keybase1.PerUserKeyBox{}, err
 	}
-	boxStr, err := PacketArmoredEncode(encInfo)
+	boxStr, err := PacketToArmoredString(encInfo)
 	if err != nil {
 		return keybase1.PerUserKeyBox{}, err
 	}
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index cc241cba778..77f9015ae02 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -375,7 +375,7 @@ func (s *SKB) SetUID(uid keybase1.UID) {
 }
 
 func (s *SKB) ArmoredEncode() (ret string, err error) {
-	return PacketArmoredEncode(s)
+	return PacketToArmoredString(s)
 }
 
 func (s *SKB) UnlockWithStoredSecret(m MetaContext, secretRetriever SecretRetriever) (ret GenericKey, err error) {

From 2e9138a73b58b9bf04d12c49aa2dd7390f794bff Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:12:18 -0700
Subject: [PATCH 31/39] Rename

---
 go/libkb/kbpackets.go   | 2 +-
 go/libkb/skb_keyring.go | 3 ++-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 76264590e01..f8b1384e778 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -20,7 +20,7 @@ type Packetable interface {
 	GetTagAndVersion() (PacketTag, PacketVersion)
 }
 
-func EncodePacketTo(p Packetable, w io.Writer) error {
+func EncodePacket(p Packetable, w io.Writer) error {
 	packet, err := NewKeybasePacket(p)
 	if err != nil {
 		return err
diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 1064fd2a159..0502f99535b 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -359,6 +359,7 @@ func (k *SKBKeyringFile) WriteTo(w io.Writer) (n int64, err error) {
 		if closeErr := b64.Close(); closeErr != nil {
 			k.G().Log.Warning("SKBKeyringFile: WriteTo b64.Close() error: %s", closeErr)
 			if err == nil {
+				n = 0
 				err = closeErr
 				return
 			}
@@ -367,7 +368,7 @@ func (k *SKBKeyringFile) WriteTo(w io.Writer) (n int64, err error) {
 	}()
 
 	for i, b := range k.Blocks {
-		err = EncodePacketTo(b, b64)
+		err = EncodePacket(b, b64)
 		if err != nil {
 			k.G().Log.Warning("Encoding problem for packet %d: %s", i, err)
 			return 0, err

From 3ef35351ee52df0a7c92063ccbd25de34b8a9125 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:15:28 -0700
Subject: [PATCH 32/39] More renaming

---
 go/libkb/kbpackets.go    | 122 +++++++++++++++++++--------------------
 go/libkb/naclwrap.go     |   6 +-
 go/libkb/per_user_key.go |   2 +-
 go/libkb/skb.go          |   2 +-
 4 files changed, 66 insertions(+), 66 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index f8b1384e778..07ab4fa371e 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -28,7 +28,7 @@ func EncodePacket(p Packetable, w io.Writer) error {
 	return packet.EncodeTo(w)
 }
 
-func PacketToBytes(p Packetable) ([]byte, error) {
+func EncodePacketToBytes(p Packetable) ([]byte, error) {
 	packet, err := NewKeybasePacket(p)
 	if err != nil {
 		return nil, err
@@ -36,7 +36,7 @@ func PacketToBytes(p Packetable) ([]byte, error) {
 	return packet.Encode()
 }
 
-func PacketToArmoredString(p Packetable) (string, error) {
+func EncodePacketToArmoredString(p Packetable) (string, error) {
 	packet, err := NewKeybasePacket(p)
 	if err != nil {
 		return "", err
@@ -44,6 +44,62 @@ func PacketToArmoredString(p Packetable) (string, error) {
 	return packet.ArmoredEncode()
 }
 
+func DecodePacket(decoder *codec.Decoder, body Packetable) error {
+	// TODO: Do something with the version too?
+	tag, _ := body.GetTagAndVersion()
+	p := KeybasePacket{
+		Body: body,
+	}
+	err := decoder.Decode(&p)
+	if err != nil {
+		return err
+	}
+
+	if p.Tag != tag {
+		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
+	}
+
+	return p.checkHash()
+}
+
+func DecodePacketFromBytes(data []byte, body Packetable) error {
+	ch := codecHandle()
+	decoder := codec.NewDecoderBytes(data, ch)
+
+	// TODO: Do something with the version too?
+	tag, _ := body.GetTagAndVersion()
+	p := KeybasePacket{
+		Body: body,
+	}
+	err := decoder.Decode(p)
+	if err != nil {
+		return err
+	}
+
+	if decoder.NumBytesRead() != len(data) {
+		return fmt.Errorf("Did not consume entire buffer: %d byte(s) left", len(data)-decoder.NumBytesRead())
+	}
+
+	if p.Tag != tag {
+		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
+	}
+
+	// Test for nonstandard msgpack data (which could be maliciously crafted)
+	// by re-encoding and making sure we get the same thing.
+	// https://github.com/keybase/client/issues/423
+	//
+	// Ideally this should be done at a lower level, but our
+	// msgpack library doesn't sort maps the way we expect. See
+	// https://github.com/ugorji/go/issues/103
+	if reencoded, err := p.Encode(); err != nil {
+		return err
+	} else if !bytes.Equal(reencoded, data) {
+		return FishyMsgpackError{data, reencoded}
+	}
+
+	return p.checkHash()
+}
+
 type FishyMsgpackError struct {
 	original  []byte
 	reencoded []byte
@@ -157,65 +213,9 @@ func (p *KeybasePacket) EncodeTo(w io.Writer) error {
 	return err
 }
 
-func DecodePacket(decoder *codec.Decoder, body Packetable) error {
-	// TODO: Do something with the version too?
-	tag, _ := body.GetTagAndVersion()
-	p := KeybasePacket{
-		Body: body,
-	}
-	err := decoder.Decode(&p)
-	if err != nil {
-		return err
-	}
-
-	if p.Tag != tag {
-		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
-	}
-
-	return p.checkHash()
-}
-
-func DecodePacketBytes(data []byte, body Packetable) error {
-	ch := codecHandle()
-	decoder := codec.NewDecoderBytes(data, ch)
-
-	// TODO: Do something with the version too?
-	tag, _ := body.GetTagAndVersion()
-	p := KeybasePacket{
-		Body: body,
-	}
-	err := decoder.Decode(p)
-	if err != nil {
-		return err
-	}
-
-	if decoder.NumBytesRead() != len(data) {
-		return fmt.Errorf("Did not consume entire buffer: %d byte(s) left", len(data)-decoder.NumBytesRead())
-	}
-
-	if p.Tag != tag {
-		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
-	}
-
-	// Test for nonstandard msgpack data (which could be maliciously crafted)
-	// by re-encoding and making sure we get the same thing.
-	// https://github.com/keybase/client/issues/423
-	//
-	// Ideally this should be done at a lower level, but our
-	// msgpack library doesn't sort maps the way we expect. See
-	// https://github.com/ugorji/go/issues/103
-	if reencoded, err := p.Encode(); err != nil {
-		return err
-	} else if !bytes.Equal(reencoded, data) {
-		return FishyMsgpackError{data, reencoded}
-	}
-
-	return p.checkHash()
-}
-
 func DecodeSKBPacket(data []byte) (*SKB, error) {
 	var info SKB
-	err := DecodePacketBytes(data, &info)
+	err := DecodePacketFromBytes(data, &info)
 	if err != nil {
 		return nil, err
 	}
@@ -232,7 +232,7 @@ func DecodeArmoredSKBPacket(s string) (*SKB, error) {
 
 func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
 	var info NaclSigInfo
-	err := DecodePacketBytes(data, &info)
+	err := DecodePacketFromBytes(data, &info)
 	if err != nil {
 		return NaclSigInfo{}, err
 	}
@@ -249,7 +249,7 @@ func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
 
 func DecodeNaclEncryptionInfoPacket(data []byte) (NaclEncryptionInfo, error) {
 	var info NaclEncryptionInfo
-	err := DecodePacketBytes(data, &info)
+	err := DecodePacketFromBytes(data, &info)
 	if err != nil {
 		return NaclEncryptionInfo{}, err
 	}
diff --git a/go/libkb/naclwrap.go b/go/libkb/naclwrap.go
index befdd505d39..ea8a5972b94 100644
--- a/go/libkb/naclwrap.go
+++ b/go/libkb/naclwrap.go
@@ -398,7 +398,7 @@ func (k NaclSigningKeyPair) SignToString(msg []byte) (sig string, id keybase1.Si
 		return
 	}
 
-	body, err := PacketToBytes(naclSig)
+	body, err := EncodePacketToBytes(naclSig)
 	if err != nil {
 		return
 	}
@@ -530,7 +530,7 @@ func (s NaclSigInfo) Verify() (*NaclSigningKeyPublic, error) {
 }
 
 func (s *NaclSigInfo) ArmoredEncode() (ret string, err error) {
-	return PacketToArmoredString(s)
+	return EncodePacketToArmoredString(s)
 }
 
 func (k NaclSigningKeyPair) ExportPublicAndPrivate() (RawPublicKey, RawPrivateKey, error) {
@@ -750,7 +750,7 @@ func (k NaclDHKeyPair) EncryptToString(plaintext []byte, sender GenericKey) (str
 		return "", err
 	}
 
-	return PacketToArmoredString(info)
+	return EncodePacketToArmoredString(info)
 }
 
 func (k NaclDHKeyPair) SecretSymmetricKey(reason EncryptionReason) (NaclSecretBoxKey, error) {
diff --git a/go/libkb/per_user_key.go b/go/libkb/per_user_key.go
index 91d946a6818..7ef1255e547 100644
--- a/go/libkb/per_user_key.go
+++ b/go/libkb/per_user_key.go
@@ -66,7 +66,7 @@ func NewPerUserKeyBox(contents PerUserKeySeed, receiverKey NaclDHKeyPair, sender
 	if err != nil {
 		return keybase1.PerUserKeyBox{}, err
 	}
-	boxStr, err := PacketToArmoredString(encInfo)
+	boxStr, err := EncodePacketToArmoredString(encInfo)
 	if err != nil {
 		return keybase1.PerUserKeyBox{}, err
 	}
diff --git a/go/libkb/skb.go b/go/libkb/skb.go
index 77f9015ae02..26227ec958b 100644
--- a/go/libkb/skb.go
+++ b/go/libkb/skb.go
@@ -375,7 +375,7 @@ func (s *SKB) SetUID(uid keybase1.UID) {
 }
 
 func (s *SKB) ArmoredEncode() (ret string, err error) {
-	return PacketToArmoredString(s)
+	return EncodePacketToArmoredString(s)
 }
 
 func (s *SKB) UnlockWithStoredSecret(m MetaContext, secretRetriever SecretRetriever) (ret GenericKey, err error) {

From 03452bcf6e32067b4732d20e61c484062acea4d5 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:18:31 -0700
Subject: [PATCH 33/39] Add TODO

---
 go/libkb/kbpackets.go | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 07ab4fa371e..8556cff8b34 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -59,6 +59,9 @@ func DecodePacket(decoder *codec.Decoder, body Packetable) error {
 		return UnmarshalError{ExpectedTag: p.Tag, Tag: tag}
 	}
 
+	// TODO: Figure out a way to do the same reencode check as in
+	// DecodePacketFromBytes.
+
 	return p.checkHash()
 }
 

From f19e04ceb880d9b61ebaccbc2faa0e281525871b Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:20:00 -0700
Subject: [PATCH 34/39] More renaming

---
 go/libkb/kbpackets.go      | 128 ++++++++++++++++++-------------------
 go/libkb/kbpackets_test.go |   4 +-
 2 files changed, 66 insertions(+), 66 deletions(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index 8556cff8b34..d406ecec673 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -21,27 +21,27 @@ type Packetable interface {
 }
 
 func EncodePacket(p Packetable, w io.Writer) error {
-	packet, err := NewKeybasePacket(p)
+	packet, err := newKeybasePacket(p)
 	if err != nil {
 		return err
 	}
-	return packet.EncodeTo(w)
+	return packet.encodeTo(w)
 }
 
 func EncodePacketToBytes(p Packetable) ([]byte, error) {
-	packet, err := NewKeybasePacket(p)
+	packet, err := newKeybasePacket(p)
 	if err != nil {
 		return nil, err
 	}
-	return packet.Encode()
+	return packet.encode()
 }
 
 func EncodePacketToArmoredString(p Packetable) (string, error) {
-	packet, err := NewKeybasePacket(p)
+	packet, err := newKeybasePacket(p)
 	if err != nil {
 		return "", err
 	}
-	return packet.ArmoredEncode()
+	return packet.armoredEncode()
 }
 
 func DecodePacket(decoder *codec.Decoder, body Packetable) error {
@@ -94,7 +94,7 @@ func DecodePacketFromBytes(data []byte, body Packetable) error {
 	// Ideally this should be done at a lower level, but our
 	// msgpack library doesn't sort maps the way we expect. See
 	// https://github.com/ugorji/go/issues/103
-	if reencoded, err := p.Encode(); err != nil {
+	if reencoded, err := p.encode(); err != nil {
 		return err
 	} else if !bytes.Equal(reencoded, data) {
 		return FishyMsgpackError{data, reencoded}
@@ -103,6 +103,57 @@ func DecodePacketFromBytes(data []byte, body Packetable) error {
 	return p.checkHash()
 }
 
+func DecodeSKBPacket(data []byte) (*SKB, error) {
+	var info SKB
+	err := DecodePacketFromBytes(data, &info)
+	if err != nil {
+		return nil, err
+	}
+	return &info, nil
+}
+
+func DecodeArmoredSKBPacket(s string) (*SKB, error) {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return nil, err
+	}
+	return DecodeSKBPacket(b)
+}
+
+func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
+	var info NaclSigInfo
+	err := DecodePacketFromBytes(data, &info)
+	if err != nil {
+		return NaclSigInfo{}, err
+	}
+	return info, nil
+}
+
+func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return NaclSigInfo{}, err
+	}
+	return DecodeNaclSigInfoPacket(b)
+}
+
+func DecodeNaclEncryptionInfoPacket(data []byte) (NaclEncryptionInfo, error) {
+	var info NaclEncryptionInfo
+	err := DecodePacketFromBytes(data, &info)
+	if err != nil {
+		return NaclEncryptionInfo{}, err
+	}
+	return info, nil
+}
+
+func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error) {
+	b, err := base64.StdEncoding.DecodeString(s)
+	if err != nil {
+		return NaclEncryptionInfo{}, err
+	}
+	return DecodeNaclEncryptionInfoPacket(b)
+}
+
 type FishyMsgpackError struct {
 	original  []byte
 	reencoded []byte
@@ -132,7 +183,7 @@ type KeybasePacket struct {
 	Version PacketVersion      `codec:"version"`
 }
 
-func NewKeybasePacket(body Packetable) (*KeybasePacket, error) {
+func newKeybasePacket(body Packetable) (*KeybasePacket, error) {
 	tag, version := body.GetTagAndVersion()
 	ret := KeybasePacket{
 		Body:    body,
@@ -169,7 +220,7 @@ func (p *KeybasePacket) hashSum() ([]byte, error) {
 	if len(p.Hash.Value) != 0 {
 		return nil, errors.New("cannot compute hash with Value present")
 	}
-	encoded, err := p.Encode()
+	encoded, err := p.encode()
 	if err != nil {
 		return nil, err
 	}
@@ -194,75 +245,24 @@ func (p *KeybasePacket) checkHash() error {
 	return err
 }
 
-func (p *KeybasePacket) Encode() ([]byte, error) {
+func (p *KeybasePacket) encode() ([]byte, error) {
 	var encoded []byte
 	err := codec.NewEncoderBytes(&encoded, codecHandle()).Encode(p)
 	return encoded, err
 }
 
-func (p *KeybasePacket) ArmoredEncode() (ret string, err error) {
+func (p *KeybasePacket) armoredEncode() (ret string, err error) {
 	var buf bytes.Buffer
 	b64 := base64.NewEncoder(base64.StdEncoding, &buf)
 	defer b64.Close()
-	err = p.EncodeTo(b64)
+	err = p.encodeTo(b64)
 	if err == nil {
 		ret = buf.String()
 	}
 	return
 }
 
-func (p *KeybasePacket) EncodeTo(w io.Writer) error {
+func (p *KeybasePacket) encodeTo(w io.Writer) error {
 	err := codec.NewEncoder(w, codecHandle()).Encode(p)
 	return err
 }
-
-func DecodeSKBPacket(data []byte) (*SKB, error) {
-	var info SKB
-	err := DecodePacketFromBytes(data, &info)
-	if err != nil {
-		return nil, err
-	}
-	return &info, nil
-}
-
-func DecodeArmoredSKBPacket(s string) (*SKB, error) {
-	b, err := base64.StdEncoding.DecodeString(s)
-	if err != nil {
-		return nil, err
-	}
-	return DecodeSKBPacket(b)
-}
-
-func DecodeNaclSigInfoPacket(data []byte) (NaclSigInfo, error) {
-	var info NaclSigInfo
-	err := DecodePacketFromBytes(data, &info)
-	if err != nil {
-		return NaclSigInfo{}, err
-	}
-	return info, nil
-}
-
-func DecodeArmoredNaclSigInfoPacket(s string) (NaclSigInfo, error) {
-	b, err := base64.StdEncoding.DecodeString(s)
-	if err != nil {
-		return NaclSigInfo{}, err
-	}
-	return DecodeNaclSigInfoPacket(b)
-}
-
-func DecodeNaclEncryptionInfoPacket(data []byte) (NaclEncryptionInfo, error) {
-	var info NaclEncryptionInfo
-	err := DecodePacketFromBytes(data, &info)
-	if err != nil {
-		return NaclEncryptionInfo{}, err
-	}
-	return info, nil
-}
-
-func DecodeArmoredNaclEncryptionInfoPacket(s string) (NaclEncryptionInfo, error) {
-	b, err := base64.StdEncoding.DecodeString(s)
-	if err != nil {
-		return NaclEncryptionInfo{}, err
-	}
-	return DecodeNaclEncryptionInfoPacket(b)
-}
diff --git a/go/libkb/kbpackets_test.go b/go/libkb/kbpackets_test.go
index 3bfbcc14254..8750eec4790 100644
--- a/go/libkb/kbpackets_test.go
+++ b/go/libkb/kbpackets_test.go
@@ -68,12 +68,12 @@ tuX4LPcEa+72KyrsweuAJravU8SjgL/gAKhzaWdfdHlwZSCjdGFnzQICp3ZlcnNpb24B
 // ints.
 func TestHardcodedPacketEncode(t *testing.T) {
 	var info NaclSigInfo
-	p, err := NewKeybasePacket(&info)
+	p, err := newKeybasePacket(&info)
 	require.NoError(t, err)
 
 	p.Hash = nil
 
-	bytes, err := p.Encode()
+	bytes, err := p.encode()
 	require.NoError(t, err)
 	// In particular, {0xcd, 0x2, 0x2} shouldn't change to
 	// {0xd1, 0x2, 0x2}.

From 45955142cbfe997e5843412eaaa2b8690afbda4c Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:28:06 -0700
Subject: [PATCH 35/39] Add test

---
 go/libkb/skb_test.go | 1 +
 1 file changed, 1 insertion(+)

diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index 9898fdb7e64..5faadd10234 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -56,6 +56,7 @@ func TestDecodeSKBSequence(t *testing.T) {
 	p3skbs, err := decodeSKBPacketList(decoder, nil)
 	require.NoError(t, err)
 	require.Equal(t, 3, len(p3skbs))
+	require.NotEqual(t, SKB{}, *p3skbs[0])
 	for _, p3skb := range p3skbs {
 		require.Equal(t, p3skbs[0], p3skb)
 	}

From 8109febd769fd9a7720907d63b6c019ad6127eef Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:28:35 -0700
Subject: [PATCH 36/39] Add comment

---
 go/libkb/skb_keyring.go | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 0502f99535b..8cd85ed0a41 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -76,6 +76,8 @@ func (s *skbPacket) CodecEncodeSelf(e *codec.Encoder) {
 func (s *skbPacket) CodecDecodeSelf(d *codec.Decoder) {
 	err := DecodePacket(d, &s.skb)
 	if err != nil {
+		// Okay to panic here, since the decoder catches
+		// panics and turns them back into errors.
 		panic(err)
 	}
 }

From 53503c232613940a689ffe8ffef5e8d44b7debe1 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:35:29 -0700
Subject: [PATCH 37/39] Fix tests

---
 go/libkb/skb_test.go | 120 +++++++++++--------------------------------
 1 file changed, 30 insertions(+), 90 deletions(-)

diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index 5faadd10234..c53c926f78b 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -26,27 +26,18 @@ type Foo struct {
 func TestDecode0(t *testing.T) {
 	data := "gqNiYXIKo2JheqRzaGl0"
 	bytes, err := base64.StdEncoding.DecodeString(data)
+	require.NoError(t, err)
 	var h codec.MsgpackHandle
-	if err != nil {
-		t.Errorf("error decoding: %s", err)
-	}
 	var foo Foo
 	err = MsgpackDecodeAll(bytes, &h, &foo)
-	if err != nil {
-		t.Errorf("Failed to decode packet: %s", err)
-	}
-	if foo.Bar != 10 {
-		t.Errorf("Bad decoding of our FOO")
-	}
-
+	require.NoError(t, err)
+	require.Equal(t, 10, foo.Bar)
 }
 
 func TestDecode1(t *testing.T) {
 	key := ""
 	_, err := DecodeArmoredSKBPacket(key)
-	if err != nil {
-		t.Errorf("Failed to decode packet: %s", err)
-	}
+	require.NoError(t, err)
 }
 
 func TestDecodeSKBSequence(t *testing.T) {
@@ -64,28 +55,20 @@ func TestDecodeSKBSequence(t *testing.T) {
 
 func makeTestLKSec(t *testing.T, gc *GlobalContext) *LKSec {
 	_, pps, err := StretchPassphrase(gc, "makeTestLKSec", []byte("saltsaltsaltsalt"))
-	if err != nil {
-		t.Fatal(err)
-	}
+	require.NoError(t, err)
 	lks := NewLKSec(pps, keybase1.UID("00000000000000000000000000000019"))
-	if err := lks.GenerateServerHalf(); err != nil {
-		t.Fatal(err)
-	}
-
+	err = lks.GenerateServerHalf()
+	require.NoError(t, err)
 	return lks
 }
 
 func makeTestSKB(t *testing.T, m MetaContext, lks *LKSec, g *GlobalContext) (MetaContext, *SKB) {
 	email := "test@keybase.io"
 	entity, err := openpgp.NewEntity("test name", "test comment", email, nil)
-	if err != nil {
-		t.Fatal(err)
-	}
+	require.NoError(t, err)
 
 	skb, err := lks.ToSKB(NewMetaContextTODO(g), NewGeneratedPGPKeyBundle(entity))
-	if err != nil {
-		t.Fatal(err)
-	}
+	require.NoError(t, err)
 	skb.uid = lks.uid
 
 	skb.newLKSecForTest = func(_ LKSecClientHalf) *LKSec {
@@ -93,9 +76,7 @@ func makeTestSKB(t *testing.T, m MetaContext, lks *LKSec, g *GlobalContext) (Met
 	}
 
 	salt, err := RandBytes(triplesec.SaltLen)
-	if err != nil {
-		t.Fatal(err)
-	}
+	require.NoError(t, err)
 	m = m.WithNewProvisionalLoginContext()
 	m.LoginContext().CreateLoginSessionWithSalt(email, salt)
 
@@ -109,17 +90,10 @@ func testPromptAndUnlock(t *testing.T, m MetaContext, skb *SKB) {
 		SecretUI: &TestSecretUI{Passphrase: "test passphrase", StoreSecret: true},
 	}
 	ss := NewSecretStore(m.G(), "testusername")
-	if ss == nil {
-		t.Fatal("NewSecretStore returned nil")
-	}
+	require.NotNil(t, ss)
 	key, err := skb.PromptAndUnlock(m, parg, ss, nil)
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	if key == nil {
-		t.Errorf("PromptAndUnlock returned a nil key")
-	}
+	require.NoError(t, err)
+	require.NotNil(t, key)
 }
 
 func TestBasicSecretStore(t *testing.T) {
@@ -129,9 +103,7 @@ func TestBasicSecretStore(t *testing.T) {
 	lks := makeTestLKSec(t, tc.G)
 	m := NewMetaContextForTest(tc)
 	expectedSecret, err := lks.GetSecret(m)
-	if err != nil {
-		t.Fatal(err)
-	}
+	require.NoError(t, err)
 
 	var skb *SKB
 	m, skb = makeTestSKB(t, m, lks, tc.G)
@@ -139,9 +111,7 @@ func TestBasicSecretStore(t *testing.T) {
 	testPromptAndUnlock(t, m, skb)
 
 	secret, _ := tc.G.SecretStore().RetrieveSecret(m, "testusername")
-	if !secret.Equal(expectedSecret) {
-		t.Errorf("secret doesn't match expected value")
-	}
+	require.True(t, secret.Equal(expectedSecret))
 
 	// Doing the prompt again should retrieve the secret from our
 	// store and not call skb.newLKSecForTest.
@@ -161,9 +131,7 @@ func TestCorruptSecretStore(t *testing.T) {
 	lks := makeTestLKSec(t, tc.G)
 	m := NewMetaContextForTest(tc)
 	expectedSecret, err := lks.GetSecret(m)
-	if err != nil {
-		t.Fatal(err)
-	}
+	require.NoError(t, err)
 
 	var skb *SKB
 	m, skb = makeTestSKB(t, m, lks, tc.G)
@@ -174,9 +142,7 @@ func TestCorruptSecretStore(t *testing.T) {
 	// The corrupt secret value should be overwritten by the new
 	// correct one.
 	secret, _ := tc.G.SecretStore().RetrieveSecret(m, "testusername")
-	if !secret.Equal(expectedSecret) {
-		t.Errorf("secret doesn't match expected value")
-	}
+	require.True(t, secret.Equal(expectedSecret))
 }
 
 func TestUnusedSecretStore(t *testing.T) {
@@ -200,9 +166,7 @@ func TestUnusedSecretStore(t *testing.T) {
 	// state, nothing should be stored in the secret store (since
 	// no prompt was shown).
 	secret, _ := tc.G.SecretStore().RetrieveSecret(m, "testusername")
-	if !secret.IsNil() {
-		t.Errorf("secret unexpectedly non-empty")
-	}
+	require.False(t, secret.IsNil())
 }
 
 func TestPromptCancelCache(t *testing.T) {
@@ -219,42 +183,26 @@ func TestPromptCancelCache(t *testing.T) {
 
 	ui := &TestCancelSecretUI{}
 	err := testErrUnlock(t, skb, ui)
-	if _, ok := err.(InputCanceledError); !ok {
-		t.Errorf("PromptAndUnlock returned error %s (%T), expected InputCanceled", err, err)
-	}
-	if ui.CallCount != 1 {
-		t.Errorf("GetPassphrase call count: %d, expected 1", ui.CallCount)
-	}
+	require.IsType(t, InputCanceledError{}, err)
+	require.Equal(t, 1, ui.CallCount)
 
 	// try again 5s later: should still get an error, but CallCount should not increase
 	fakeClock.Advance(5 * time.Second)
 	err = testErrUnlock(t, skb, ui)
-	if _, ok := err.(SkipSecretPromptError); !ok {
-		t.Errorf("PromptAndUnlock returned %s (%T), expected SkipSecretPromptError", err, err)
-	}
-	if ui.CallCount != 1 {
-		t.Errorf("GetPassphrase call count: %d, expected 1", ui.CallCount)
-	}
+	require.IsType(t, SkipSecretPromptError{}, err)
+	require.Equal(t, 1, ui.CallCount)
 
 	// wait 10 minutes: should get input canceled and CallCount should go up 1
 	fakeClock.Advance(10 * time.Minute)
 	err = testErrUnlock(t, skb, ui)
-	if _, ok := err.(InputCanceledError); !ok {
-		t.Errorf("PromptAndUnlock returned error %s (%T)", err, err)
-	}
-	if ui.CallCount != 2 {
-		t.Errorf("GetPassphrase call count: %d, expected 2", ui.CallCount)
-	}
+	require.IsType(t, InputCanceledError{}, err)
+	require.Equal(t, 2, ui.CallCount)
 
 	// try again 5s later: should still get an error, but CallCount should not increase
 	fakeClock.Advance(5 * time.Second)
 	err = testErrUnlock(t, skb, ui)
-	if _, ok := err.(SkipSecretPromptError); !ok {
-		t.Errorf("PromptAndUnlock returned %s (%T), expected SkipSecretPromptError", err, err)
-	}
-	if ui.CallCount != 2 {
-		t.Errorf("GetPassphrase call count: %d, expected 1", ui.CallCount)
-	}
+	require.IsType(t, SkipSecretPromptError{}, err)
+	require.Equal(t, 2, ui.CallCount)
 
 	// wait 10 minutes: enter a passphrase this time
 	fakeClock.Advance(10 * time.Minute)
@@ -263,12 +211,8 @@ func TestPromptCancelCache(t *testing.T) {
 		SecretUI: &TestSecretUI{Passphrase: "passphrase"},
 	}
 	key, err := skb.PromptAndUnlock(NewMetaContextTODO(tc.G), parg, NewSecretStore(tc.G, "testusername"), nil)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if key == nil {
-		t.Errorf("PromptAndUnlock w/ passphrase failed to return a key")
-	}
+	require.NoError(t, err)
+	require.NotNil(t, key)
 }
 
 func testErrUnlock(t *testing.T, skb *SKB, ui *TestCancelSecretUI) error {
@@ -278,11 +222,7 @@ func testErrUnlock(t *testing.T, skb *SKB, ui *TestCancelSecretUI) error {
 		UseCancelCache: true,
 	}
 	key, err := skb.PromptAndUnlock(NewMetaContextTODO(skb.G()), parg, NewSecretStore(skb.G(), "testusername"), nil)
-	if err == nil {
-		t.Fatal("PromptAndUnlock returned nil error")
-	}
-	if key != nil {
-		t.Errorf("PromptAndUnlock returned a key (%v)", key)
-	}
+	require.NotNil(t, err)
+	require.Nil(t, key)
 	return err
 }

From 6a16ec7570e977b53fc7e0c88015447b84b32525 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Wed, 29 Aug 2018 23:54:33 -0700
Subject: [PATCH 38/39] Fix vet

---
 go/libkb/skb_keyring.go | 8 +++++---
 go/libkb/skb_test.go    | 2 +-
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/go/libkb/skb_keyring.go b/go/libkb/skb_keyring.go
index 8cd85ed0a41..3eaf0a1b49a 100644
--- a/go/libkb/skb_keyring.go
+++ b/go/libkb/skb_keyring.go
@@ -66,7 +66,7 @@ func (k *SKBKeyringFile) MarkDirty() {
 }
 
 type skbPacket struct {
-	skb SKB
+	skb *SKB
 }
 
 func (s *skbPacket) CodecEncodeSelf(e *codec.Encoder) {
@@ -74,12 +74,14 @@ func (s *skbPacket) CodecEncodeSelf(e *codec.Encoder) {
 }
 
 func (s *skbPacket) CodecDecodeSelf(d *codec.Decoder) {
-	err := DecodePacket(d, &s.skb)
+	var skb SKB
+	err := DecodePacket(d, &skb)
 	if err != nil {
 		// Okay to panic here, since the decoder catches
 		// panics and turns them back into errors.
 		panic(err)
 	}
+	s.skb = &skb
 }
 
 func decodeSKBPacketList(r io.Reader, g *GlobalContext) ([]*SKB, error) {
@@ -95,7 +97,7 @@ func decodeSKBPacketList(r io.Reader, g *GlobalContext) ([]*SKB, error) {
 	skbs := make([]*SKB, len(packets))
 	for i, s := range packets {
 		s.skb.SetGlobalContext(g)
-		skbs[i] = &s.skb
+		skbs[i] = s.skb
 	}
 	return skbs, nil
 }
diff --git a/go/libkb/skb_test.go b/go/libkb/skb_test.go
index c53c926f78b..bf4ae66a39f 100644
--- a/go/libkb/skb_test.go
+++ b/go/libkb/skb_test.go
@@ -47,7 +47,7 @@ func TestDecodeSKBSequence(t *testing.T) {
 	p3skbs, err := decodeSKBPacketList(decoder, nil)
 	require.NoError(t, err)
 	require.Equal(t, 3, len(p3skbs))
-	require.NotEqual(t, SKB{}, *p3skbs[0])
+	require.NotEqual(t, &SKB{}, p3skbs[0])
 	for _, p3skb := range p3skbs {
 		require.Equal(t, p3skbs[0], p3skb)
 	}

From bdda9a6b27773e64cad1c4e4d01312d894fac0c7 Mon Sep 17 00:00:00 2001
From: Frederick Akalin <akalin@keyba.se>
Date: Thu, 30 Aug 2018 00:36:15 -0700
Subject: [PATCH 39/39] Fix

---
 go/libkb/kbpackets.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/go/libkb/kbpackets.go b/go/libkb/kbpackets.go
index d406ecec673..d2b2732a2ac 100644
--- a/go/libkb/kbpackets.go
+++ b/go/libkb/kbpackets.go
@@ -74,7 +74,7 @@ func DecodePacketFromBytes(data []byte, body Packetable) error {
 	p := KeybasePacket{
 		Body: body,
 	}
-	err := decoder.Decode(p)
+	err := decoder.Decode(&p)
 	if err != nil {
 		return err
 	}
